/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper */
#include <stdlib.h>
#include <XlfDeviceWrapper.h>
#ifndef __cplusplus
#include <string>
#else
#include <cstring>
#endif

#ifdef __cplusplus
extern "C" {
#endif

XlfDeviceWrapper deviceWrapper;

char* jstringTostring(JNIEnv* env, jstring jstr)
{
	char* rtn = NULL;
	#ifndef __cplusplus
	jclass clsstring = (*env)->FindClass(env,"java/lang/String");
	#else
	jclass clsstring = env->FindClass("java/lang/String");
	#endif
	
	#ifndef __cplusplus
	jstring strencode = (*env)->NewStringUTF(env,"utf-8");
	#else
	jstring strencode = env->NewStringUTF("utf-8");
	#endif
	
	#ifndef __cplusplus
	jmethodID mid = (*env)->GetMethodID(env,clsstring, "getBytes", "(Ljava/lang/String;)[B");
	#else
	jmethodID mid = env->GetMethodID(clsstring, "getBytes", "(Ljava/lang/String;)[B");
	#endif
	
	#ifndef __cplusplus
	jbyteArray barr= (jbyteArray)(*env)->CallObjectMethod(env,jstr, mid, strencode);
	#else
	jbyteArray barr= (jbyteArray) env->CallObjectMethod(jstr, mid, strencode);
	#endif
	
	#ifndef __cplusplus
	jsize alen = (*env)->GetArrayLength(env,barr);
	#else
	jsize alen = env->GetArrayLength(barr);
	#endif
	
	#ifndef __cplusplus
	jbyte* ba = (*env)->GetByteArrayElements(env,barr, JNI_FALSE);
	#else
	jbyte* ba = env->GetByteArrayElements(barr, JNI_FALSE);
	#endif
	
	if (alen > 0)
	{
		rtn = (char*)malloc(alen + 1);

		memcpy(rtn, ba, alen);
		rtn[alen] = 0;
	}
	#ifndef __cplusplus
	(*env)->ReleaseByteArrayElements(env,barr, ba, 0);
	#else
	env->ReleaseByteArrayElements(barr, ba, 0);
	#endif
	return rtn;
}
#ifdef __cplusplus
#define cbyteToJbyte(cbyte,javaArray) do{ \
	(javaArray) = env->NewByteArray((cbyte).getLength()); \
	env->SetByteArrayRegion((javaArray),0,(cbyte).getLength(),(jbyte*)(cbyte).getData());\
}while (0)
#else
#define cbyteToJbyte(cbyte,javaArray) ( {\
	(javaArray) = (*env)->NewByteArray(env,(cbyte).getLength());\
	(*env)->SetByteArrayRegion(env,(javaArray),0,(cbyte).getLength(),(jbyte*)(cbyte).getData());	\
})
#endif

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    initDevicesControl
 * Signature: (Ljava/lang/String;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_initDevicesControl
  (JNIEnv *env, jclass obj, jstring deviceId, jstring deviceType){
  	
	char * c_deviceId = jstringTostring(env,deviceId);
	char * c_deviceType = jstringTostring(env,deviceType);
	deviceWrapper.initDevicesControl(c_deviceId,c_deviceType);
	free(c_deviceId);
	free(c_deviceType);
	
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    delDevicesControl
 * Signature: (Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_delDevicesControl
  (JNIEnv *env, jclass obj, jstring deviceId){
	char * c_deviceId = jstringTostring(env,deviceId);	deviceWrapper.delDevicesControl(c_deviceId);
	free(c_deviceId);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    delAllControl
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_delAllControl
  (JNIEnv *env, jclass obj){
	deviceWrapper.delAllDevicesControl();
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setDevicePowerCommon
 * Signature: (Ljava/lang/String;II)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setDevicePowerCommon
  (JNIEnv *env, jclass obj, jstring deviceId, jint power, jint soundSet){
  	jbyteArray javaArray=NULL;
	char * c_deviceId = jstringTostring(env,deviceId);
  	CByte cbyte = deviceWrapper.setDevicePowerCommon(c_deviceId,(int)power,(int)soundSet);
	if(cbyte.getLength()>0){
		cbyteToJbyte(cbyte,javaArray);
	}
	free(c_deviceId);
	return	javaArray;
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setQueryDeviceAllStatus
 * Signature: (Ljava/lang/String;I)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setQueryDeviceAllStatus
    (JNIEnv *env, jclass obj, jstring deviceId, jint soundSet){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    CByte cbyte = deviceWrapper.setQueryDeviceAllStatus(c_deviceId,(int)soundSet);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    return	javaArray;
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setQueryDeviceAllFunctions
 * Signature: (Ljava/lang/String;I)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setQueryDeviceAllFunctions
    (JNIEnv *env, jclass obj, jstring deviceId, jint soundSet){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    CByte cbyte = deviceWrapper.setQueryDeviceAllFunctions(c_deviceId,(int)soundSet);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    return	javaArray;
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setDeviceAllStatus
 * Signature: (Ljava/lang/String;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setDeviceAllStatus
    (JNIEnv *env, jclass obj, jstring deviceId, jstring allStauts){
    char * c_deviceId = jstringTostring(env,deviceId);
    char * c_allStauts = jstringTostring(env,allStauts);
    deviceWrapper.setDeviceAllStatus(c_deviceId,c_allStauts);
    free(deviceId);
    free(allStauts);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setDeviceFunction
 * Signature: (Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)Z
 */
JNIEXPORT void JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setDeviceFunction
    (JNIEnv *env, jclass obj, jstring deviceId, jstring function){
    char * c_deviceId = jstringTostring(env,deviceId);
    char * c_function = jstringTostring(env,function);
    deviceWrapper.setDeviceFunction(c_deviceId,c_function);
    free(deviceId);
    free(function);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setDeviceFunctionEnable
 * Signature: (Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)Z
 */
JNIEXPORT void JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setDeviceFunctionEnable
    (JNIEnv *env, jclass obj, jstring deviceId, jstring functionEnable){
    char * c_deviceId = jstringTostring(env,deviceId);
    char * c_functionEnable = jstringTostring(env,functionEnable);
    deviceWrapper.setDeviceFunctionEnable(c_deviceId,c_functionEnable);
    free(deviceId);
    free(functionEnable);
    }

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setIntervalTimeOfStatusRefresh
 * Signature: (Ljava/lang/String;J)[B
 */
JNIEXPORT void JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setIntervalTimeOfStatusRefresh
    (JNIEnv *env, jclass obj, jstring deviceId, jlong seconds){
    char * c_deviceId = jstringTostring(env,deviceId);
    deviceWrapper.setIntervalTimeOfStatusRefresh(c_deviceId,(long)seconds);
    free(deviceId);
    }


/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getIntervalTimeOfStatusRefreshIsOverTime
 * Signature: (Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getIntervalTimeOfStatusRefreshIsOverTime
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    bool ret = deviceWrapper.getIntervalTimeOfStatusRefreshIsOverTime(c_deviceId);
    free(deviceId);
    return (jboolean)ret;
    }

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getVersionNumberOfDevicesControl
 * Signature: (Ljava/lang/String;)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getVersionNumberOfDevicesControl
    (JNIEnv *env, jclass obj, jstring deviceId){
    jstring strret=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    const char * c_ret = deviceWrapper.getVersionNumberOfDevicesControl(c_deviceId).c_str();
    strret=env->NewStringUTF(c_ret);
    free(c_deviceId);
    return strret;
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getVersionNumberOfSoLibrary
 * Signature: (Ljava/lang/String;)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getVersionNumberOfSoLibrary
    (JNIEnv *env, jclass obj, jstring deviceId){
    jstring strret=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    const char * c_ret = deviceWrapper.getVersionNumberOfSoLibrary(c_deviceId).c_str();
    strret=env->NewStringUTF(c_ret);
    free(c_deviceId);
    return strret;
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getVersionNumberOf4004
 * Signature: (Ljava/lang/String;)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getVersionNumberOf4004
    (JNIEnv *env, jclass obj, jstring deviceId){
    jstring strret=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    const char * c_ret = deviceWrapper.getVersionNumberOf4004(c_deviceId).c_str();
    strret=env->NewStringUTF(c_ret);
    free(c_deviceId);
    return strret;
    }
/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setAirconditionSmartStatus
 * Signature: (Ljava/lang/String;Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setAirconditionSmartStatus
    (JNIEnv *env, jclass obj, jstring deviceId, jstring smartStatus){
    char * c_deviceId = jstringTostring(env,deviceId);
    char * c_smartStatus = jstringTostring(env,smartStatus);
    bool ret = deviceWrapper.setAirconditionSmartStatus(c_deviceId,c_smartStatus);
    free(deviceId);
    free(smartStatus);
    return (jboolean)ret;
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setAirconditionPower
 * Signature: (Ljava/lang/String;II)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setAirconditionPower
    (JNIEnv *env, jclass obj, jstring deviceId, jint power, jint soundSet){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    CByte cbyte = deviceWrapper.setAirconditionPower(c_deviceId,(int)power,(int)soundSet);
    if(cbyte.getLength()>0){
    cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    return	javaArray;
    
    
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setAirconditionMode
 * Signature: (Ljava/lang/String;Ljava/lang/String;I)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setAirconditionMode
    (JNIEnv *env, jclass obj, jstring deviceId, jstring mode, jint soundSet){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    char * c_mode = jstringTostring(env,mode);
    CByte cbyte = deviceWrapper.setAirconditionMode(c_deviceId,c_mode,(int)soundSet);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    free(c_mode);
    return	javaArray;
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setAirconditionTemperature
 * Signature: (Ljava/lang/String;II)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setAirconditionTemperature
  (JNIEnv *env, jclass obj, jstring deviceId, jint temperature, jint soundSet){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    CByte cbyte = deviceWrapper.setAirconditionTemperature(c_deviceId,(int)temperature,(int)soundSet);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    return	javaArray;
      
    
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setAirconditionWindSpeed
 * Signature: (Ljava/lang/String;Ljava/lang/String;I)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setAirconditionWindSpeed
    (JNIEnv *env, jclass obj, jstring deviceId, jstring windSpeed, jint soundSet){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    char * c_windSpeed = jstringTostring(env,windSpeed);
    CByte cbyte = deviceWrapper.setAirconditionWindSpeed(c_deviceId,c_windSpeed,(int)soundSet);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    free(c_windSpeed);
    return	javaArray;
    
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setAirconditionHorizontalWind
 * Signature: (Ljava/lang/String;IIII)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setAirconditionHorizontalWind
    (JNIEnv *env, jclass obj, jstring deviceId, jint horizontalWindControl, jint leftWindSwing, jint rightWindSwing, jint soundSet){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    CByte cbyte = deviceWrapper.setAirconditionHorizontalWind(c_deviceId,(int)horizontalWindControl,(int)leftWindSwing,(int)rightWindSwing,(int)soundSet);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    return	javaArray;
    
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setAirconditionVerticalWind
 * Signature: (Ljava/lang/String;Ljava/lang/String;II)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setAirconditionVerticalWind
    (JNIEnv *env, jclass obj, jstring deviceId, jstring airDoorPosition, jint airDoorControl, jint soundSet){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    char * c_airDoorPosition = jstringTostring(env,airDoorPosition);
    CByte cbyte = deviceWrapper.setAirconditionVerticalWind(c_deviceId,c_airDoorPosition,(int)airDoorControl,(int)soundSet);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    free(c_airDoorPosition);
    return	javaArray;
        
}
/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setAirconditionTiming
 * Signature: (Ljava/lang/String;III)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setAirconditionTiming
    (JNIEnv *env, jclass obj, jstring deviceId, jint timingValid,jint timingValue, jint soundSet){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    CByte cbyte = deviceWrapper.setAirconditionTiming(c_deviceId,(int)timingValid,(int)timingValue,(int)soundSet);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    return	javaArray;
        
        
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setAirconditionSleepMode
 * Signature: (Ljava/lang/String;Ljava/lang/String;I)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setAirconditionSleepMode
    (JNIEnv *env, jclass obj, jstring deviceId, jstring sleepMode, jint soundSet){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    char * c_sleepMode = jstringTostring(env,sleepMode);
    CByte cbyte = deviceWrapper.setAirconditionSleepMode(c_deviceId,c_sleepMode,(int)soundSet);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    free(c_sleepMode);
    return	javaArray;
        
        
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setAirconditionEnergySaving
 * Signature: (Ljava/lang/String;II)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setAirconditionEnergySaving
    (JNIEnv *env, jclass obj, jstring deviceId, jint energySaving, jint soundSet){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    CByte cbyte = deviceWrapper.setAirconditionEnergySaving(c_deviceId,(int)energySaving,(int)soundSet);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    return	javaArray;
        
        
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setAirconditionBackgroundLight
 * Signature: (Ljava/lang/String;II)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setAirconditionBackgroundLight
    (JNIEnv *env, jclass obj, jstring deviceId, jint light, jint soundSet){
        jbyteArray javaArray=NULL;
        char * c_deviceId = jstringTostring(env,deviceId);
        CByte cbyte = deviceWrapper.setAirconditionBackgroundLight(c_deviceId,(int)light,(int)soundSet);
        if(cbyte.getLength()>0){
            cbyteToJbyte(cbyte,javaArray);
        }
        free(c_deviceId);
        return	javaArray;  
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setAirconditionScreenLight
 * Signature: (Ljava/lang/String;II)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setAirconditionScreenLight
    (JNIEnv *env, jclass obj, jstring deviceId, jint light, jint soundSet){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    CByte cbyte = deviceWrapper.setAirconditionScreenLight(c_deviceId,(int)light,(int)soundSet);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    return	javaArray;
        
        
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setAirconditionLEDLight
 * Signature: (Ljava/lang/String;II)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setAirconditionLEDLight
    (JNIEnv *env, jclass obj, jstring deviceId, jint light, jint soundSet){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    CByte cbyte = deviceWrapper.setAirconditionLEDLight(c_deviceId,(int)light,(int)soundSet);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    return	javaArray;
        
        
}
/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setAirconditionElectricalHeating
 * Signature: (Ljava/lang/String;II)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setAirconditionElectricalHeating
    (JNIEnv *env, jclass obj, jstring deviceId, jint electricalHeating, jint soundSet){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    CByte cbyte = deviceWrapper.setAirconditionElectricalHeating(c_deviceId,(int)electricalHeating,(int)soundSet);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    return	javaArray;
        
        
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setAirconditionEfficient
 * Signature: (Ljava/lang/String;II)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setAirconditionEfficient
    (JNIEnv *env, jclass obj, jstring deviceId, jint fastCooling, jint soundSet){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    CByte cbyte = deviceWrapper.setAirconditionEfficient(c_deviceId,(int)fastCooling,(int)soundSet);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    return	javaArray;
        
        
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setAirconditionTemperatureExportSales
 * Signature: (Ljava/lang/String;II)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setAirconditionTemperatureExportSales
    (JNIEnv *env, jclass obj, jstring deviceId, jint temperature, jint soundSet){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    CByte cbyte = deviceWrapper.setAirconditionTemperatureExportSales(c_deviceId,(int)temperature,(int)soundSet);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    return	javaArray;
        
        
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setAirconditionRealTimePowerOn
 * Signature: (Ljava/lang/String;III)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setAirconditionRealTimePowerOn
    (JNIEnv *env, jclass obj, jstring deviceId, jint power,jint minuteValue, jint soundSet){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    CByte cbyte = deviceWrapper.setAirconditionRealTimePowerOn(c_deviceId,(int)power,(int)minuteValue,(int)soundSet);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    return	javaArray;
        
        
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setAirconditionRealTimePowerOff
 * Signature: (Ljava/lang/String;III)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setAirconditionRealTimePowerOff
    (JNIEnv *env, jclass obj, jstring deviceId, jint power,jint minuteValue, jint soundSet){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    CByte cbyte = deviceWrapper.setAirconditionRealTimePowerOff(c_deviceId,(int)power,(int)minuteValue,(int)soundSet);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    return	javaArray;
        
        
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setAirconditionEfficientExportSales
 * Signature: (Ljava/lang/String;II)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setAirconditionEfficientExportSales
    (JNIEnv *env, jclass obj, jstring deviceId, jint fastCooling, jint soundSet){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    CByte cbyte = deviceWrapper.setAirconditionEfficientExportSales(c_deviceId,(int)fastCooling,(int)soundSet);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    return	javaArray;
        
        
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setAirconditionMuteMode
 * Signature: (Ljava/lang/String;II)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setAirconditionMuteMode
    (JNIEnv *env, jclass obj, jstring deviceId, jint isMuteModeOn, jint soundSet){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    CByte cbyte = deviceWrapper.setAirconditionMuteMode(c_deviceId,(int)isMuteModeOn,(int)soundSet);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    return	javaArray;
        
        
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setAirconditionWindDirection
 * Signature: (Ljava/lang/String;II)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setAirconditionWindDirection
    (JNIEnv *env, jclass obj, jstring deviceId, jint isWindDirectionOn, jint soundSet){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    CByte cbyte = deviceWrapper.setAirconditionWindDirection(c_deviceId,(int)isWindDirectionOn,(int)soundSet);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    return	javaArray;
        
        
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setAirconditionHumidity
 * Signature: (Ljava/lang/String;II)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setAirconditionHumidity
    (JNIEnv *env, jclass obj, jstring deviceId, jint humidity, jint soundSet){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    CByte cbyte = deviceWrapper.setAirconditionHumidity(c_deviceId,(int)humidity,(int)soundSet);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    return	javaArray;
        
        
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setAirconditionFahrenheitOrCelsiusSwitch
 * Signature: (Ljava/lang/String;II)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setAirconditionFahrenheitOrCelsiusSwitch
    (JNIEnv *env, jclass obj, jstring deviceId, jint isSwitch, jint soundSet){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    CByte cbyte = deviceWrapper.setAirconditionFahrenheitOrCelsiusSwitch(c_deviceId,(int)isSwitch,(int)soundSet);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    return	javaArray;
        
        
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setAirconditionAndPowerSavingMode
 * Signature: (Ljava/lang/String;II)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setAirconditionAndPowerSavingMode
    (JNIEnv *env, jclass obj, jstring deviceId, jint isAndPowerSavingMode, jint soundSet){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    CByte cbyte = deviceWrapper.setAirconditionAndPowerSavingMode(c_deviceId,(int)isAndPowerSavingMode,(int)soundSet);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    return	javaArray;
        
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setAirconditionDualMode
 * Signature: (Ljava/lang/String;II)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setAirconditionDualMode
    (JNIEnv *env, jclass obj, jstring deviceId, jint isDualMode, jint soundSet){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    CByte cbyte = deviceWrapper.setAirconditionDualMode(c_deviceId,(int)isDualMode,(int)soundSet);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    return	javaArray;
        
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setAirconditionIndoorClean
 * Signature: (Ljava/lang/String;II)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setAirconditionIndoorClean
    (JNIEnv *env, jclass obj, jstring deviceId, jint isIndoorClean, jint soundSet){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    CByte cbyte = deviceWrapper.setAirconditionIndoorClean(c_deviceId,(int)isIndoorClean,(int)soundSet);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    return	javaArray;
        
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setAirconditionOutdoorClean
 * Signature: (Ljava/lang/String;II)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setAirconditionOutdoorClean
    (JNIEnv *env, jclass obj, jstring deviceId, jint isOutdoorClean, jint soundSet){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    CByte cbyte = deviceWrapper.setAirconditionOutdoorClean(c_deviceId,(int)isOutdoorClean,(int)soundSet);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    return	javaArray;
        
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setAirconditionCleanSmoke
 * Signature: (Ljava/lang/String;II)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setAirconditionCleanSmoke
    (JNIEnv *env, jclass obj, jstring deviceId, jint isCleanSmoke, jint soundSet){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    CByte cbyte = deviceWrapper.setAirconditionCleanSmoke(c_deviceId,(int)isCleanSmoke,(int)soundSet);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    return	javaArray;
        
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setAirconditionBrightness
 * Signature: (Ljava/lang/String;II)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setAirconditionBrightness
    (JNIEnv *env, jclass obj, jstring deviceId, jint brightness, jint soundSet){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    CByte cbyte = deviceWrapper.setAirconditionBrightness(c_deviceId,(int)brightness,(int)soundSet);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    return	javaArray;
        
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setAirconditionDehumidifyMode
 * Signature: (Ljava/lang/String;Ljava/lang/String;I)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setAirconditionDehumidifyMode
    (JNIEnv *env, jclass obj, jstring deviceId, jstring isDehumidifyMode, jint soundSet){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    char * c_isDehumidifyMode = jstringTostring(env,isDehumidifyMode);
    CByte cbyte = deviceWrapper.setAirconditionDehumidifyMode(c_deviceId,c_isDehumidifyMode,(int)soundSet);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    free(c_isDehumidifyMode);
    return	javaArray;
        
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setAirconditionNaturalWind
 * Signature: (Ljava/lang/String;II)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setAirconditionNaturalWind
    (JNIEnv *env, jclass obj, jstring deviceId, jint isNaturalWind, jint soundSet){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    CByte cbyte = deviceWrapper.setAirconditionNaturalWind(c_deviceId,(int)isNaturalWind,(int)soundSet);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    return	javaArray;
        
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setAirconditionFreshAir
 * Signature: (Ljava/lang/String;II)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setAirconditionFreshAir
    (JNIEnv *env, jclass obj, jstring deviceId, jint isFreshAir, jint soundSet){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    CByte cbyte = deviceWrapper.setAirconditionFreshAir(c_deviceId,(int)isFreshAir,(int)soundSet);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    return	javaArray;
        
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setAirconditionIndoorOrOutdoorTemperatureDisplaySwitch
 * Signature: (Ljava/lang/String;II)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setAirconditionIndoorOrOutdoorTemperatureDisplaySwitch
    (JNIEnv *env, jclass obj, jstring deviceId, jint isSwitch, jint soundSet){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    CByte cbyte = deviceWrapper.setAirconditionIndoorOrOutdoorTemperatureDisplaySwitch(c_deviceId,(int)isSwitch,(int)soundSet);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    return	javaArray;
        
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setAirconditionAirExchange
 * Signature: (Ljava/lang/String;II)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setAirconditionAirExchange
    (JNIEnv *env, jclass obj, jstring deviceId, jint isAirExchange, jint soundSet){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    CByte cbyte = deviceWrapper.setAirconditionAirExchange(c_deviceId,(int)isAirExchange,(int)soundSet);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    return	javaArray;
        
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setAirconditionSmartEye
 * Signature: (Ljava/lang/String;II)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setAirconditionSmartEye
    (JNIEnv *env, jclass obj, jstring deviceId, jint isSmartEye, jint soundSet){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    CByte cbyte = deviceWrapper.setAirconditionSmartEye(c_deviceId,(int)isSmartEye,(int)soundSet);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    return	javaArray;
        
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setAirconditionIndoorFilterCleanReset
 * Signature: (Ljava/lang/String;II)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setAirconditionIndoorFilterCleanReset
    (JNIEnv *env, jclass obj, jstring deviceId, jint isReset, jint soundSet){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    CByte cbyte = deviceWrapper.setAirconditionIndoorFilterCleanReset(c_deviceId,(int)isReset,(int)soundSet);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    return	javaArray;
        
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setAirconditionVoice
 * Signature: (Ljava/lang/String;II)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setAirconditionVoice
    (JNIEnv *env, jclass obj, jstring deviceId, jint isVoice, jint soundSet){
        jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    CByte cbyte = deviceWrapper.setAirconditionVoice(c_deviceId,(int)isVoice,(int)soundSet);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    return	javaArray;
        
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionOnlineStatus
 * Signature: (Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionOnlineStatus
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    bool ret = deviceWrapper.getAirconditionOnlineStatus(c_deviceId);
    free(deviceId);
    return (jboolean)ret;
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionSmartStatus
 * Signature: (Ljava/lang/String;)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionSmartStatus
    (JNIEnv *env, jclass obj, jstring deviceId){
    jstring strret=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    const char * c_ret = deviceWrapper.getAirconditionSmartStatus(c_deviceId).c_str();
    strret=env->NewStringUTF(c_ret);
    free(c_deviceId);
    return strret;
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionSequence
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionSequence
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionSequence(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionResult
 * Signature: (Ljava/lang/String;)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionResult
    (JNIEnv *env, jclass obj, jstring deviceId){
    jstring strret=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    const char * c_ret = deviceWrapper.getAirconditionResult(c_deviceId).c_str();
    strret=env->NewStringUTF(c_ret);
    free(c_deviceId);
    return strret;
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionWindSpeed
 * Signature: (Ljava/lang/String;)[B
 */
JNIEXPORT jstring JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionWindSpeed
    (JNIEnv *env, jclass obj, jstring deviceId){
    jstring strret=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    const char * c_ret = deviceWrapper.getAirconditionWindSpeed(c_deviceId).c_str();
    strret=env->NewStringUTF(c_ret);
    free(c_deviceId);
    return strret;
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionMode
 * Signature: (Ljava/lang/String;)[B
 */
JNIEXPORT jstring JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionMode
    (JNIEnv *env, jclass obj, jstring deviceId){
    jstring strret=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    const char * c_ret = deviceWrapper.getAirconditionMode(c_deviceId).c_str();
    strret=env->NewStringUTF(c_ret);
    free(c_deviceId);
    return strret;
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionSleepMode
 * Signature: (Ljava/lang/String;)[B
 */
JNIEXPORT jstring JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionSleepMode
    (JNIEnv *env, jclass obj, jstring deviceId){
    jstring strret=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    const char * c_ret = deviceWrapper.getAirconditionSleepMode(c_deviceId).c_str();
    strret=env->NewStringUTF(c_ret);
    free(c_deviceId);
    return strret;
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionPower
 * Signature: (Ljava/lang/String;)[B
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionPower
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionPower(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionSetPowerOnDuration
 * Signature: (Ljava/lang/String;)J
 */
JNIEXPORT jlong JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionSetPowerOnDuration
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    long ret = deviceWrapper.getAirconditionSetPowerOnDuration(c_deviceId);
    free(c_deviceId);
    return jlong(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionSetPowerOffDuration
 * Signature: (Ljava/lang/String;)J
 */
JNIEXPORT jlong JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionSetPowerOffDuration
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    long ret = deviceWrapper.getAirconditionSetPowerOffDuration(c_deviceId);
    free(c_deviceId);
    return jlong(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionSetModeDuration
 * Signature: (Ljava/lang/String;)J
 */
JNIEXPORT jlong JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionSetModeDuration
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    long ret = deviceWrapper.getAirconditionSetModeDuration(c_deviceId);
    free(c_deviceId);
    return jlong(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionSetHighEfficientDuration
 * Signature: (Ljava/lang/String;)J
 */
JNIEXPORT jlong JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionSetHighEfficientDuration
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    long ret = deviceWrapper.getAirconditionSetHighEfficientDuration(c_deviceId);
    free(c_deviceId);
    return jlong(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionSetTemperature
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionSetTemperature
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionSetTemperature(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionTemperatureIndoor
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionTemperatureIndoor
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionTemperatureIndoor(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionTemperatureOutdoor
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionTemperatureOutdoor
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionTemperatureOutdoor(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionMute
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionMute
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionMute(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionHighEfficient
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionHighEfficient
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionHighEfficient(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionAirDoorPosition
 * Signature: (Ljava/lang/String;)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionAirDoorPosition
    (JNIEnv *env, jclass obj, jstring deviceId){
    jstring strret=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    const char * c_ret = deviceWrapper.getAirconditionAirDoorPosition(c_deviceId).c_str();
    strret=env->NewStringUTF(c_ret);
    free(c_deviceId);
    return strret;
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionWindDirection
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionWindDirection
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionWindDirection(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionHumidity
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionHumidity
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionHumidity(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}


/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionSomatosensoryRealityTemperature
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionSomatosensoryRealityTemperature
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionSomatosensoryRealityTemperature(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionIndoorRealityTemperature
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionIndoorRealityTemperature
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionIndoorRealityTemperature(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionIndoorPipeTemperature
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionIndoorPipeTemperature
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionIndoorPipeTemperature(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionIndoorRealityHumidity
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionIndoorRealityHumidity
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionIndoorRealityHumidity(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionSomatosensoryCompensation
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionSomatosensoryCompensation
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionSomatosensoryCompensation(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionSomatosensoryContrl
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionSomatosensoryContrl
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionSomatosensoryContrl(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionTemperatureCompensation
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionTemperatureCompensation
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionTemperatureCompensation(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionTemperatureValueSwitch
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionTemperatureValueSwitch
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionTemperatureValueSwitch(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionGeneralTimingShutdownValue
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionGeneralTimingShutdownValue
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionGeneralTimingShutdownValue(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionRealityHour
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionRealityHour
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionRealityHour(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionRealityMinute
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionRealityMinute
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionRealityMinute(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionRealityBootContrl
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionRealityBootContrl
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionRealityBootContrl(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionRealityBootHour
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionRealityBootHour
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionRealityBootHour(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionRealityBootMinute
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionRealityBootMinute
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionRealityBootMinute(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionRealityShutdownContrl
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionRealityShutdownContrl
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionRealityShutdownContrl(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionRealityShutdownHour
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionRealityShutdownHour
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionRealityShutdownHour(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionRealityShutdownMinute
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionRealityShutdownMinute
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionRealityShutdownMinute(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionDehumidificationMode
 * Signature: (Ljava/lang/String;)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionDehumidificationMode
    (JNIEnv *env, jclass obj, jstring deviceId){
    jstring strret=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    const char * c_ret = deviceWrapper.getAirconditionDehumidificationMode(c_deviceId).c_str();
    strret=env->NewStringUTF(c_ret);
    free(c_deviceId);
    return strret;
}


/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionVerticalWindMode
 * Signature: (Ljava/lang/String;)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionVerticalWindMode
    (JNIEnv *env, jclass obj, jstring deviceId){
    jstring strret=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    const char * c_ret = deviceWrapper.getAirconditionVerticalWindMode(c_deviceId).c_str();
    strret=env->NewStringUTF(c_ret);
    free(c_deviceId);
    return strret;
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionVerticalWindContrl
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionVerticalWindContrl
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionVerticalWindContrl(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}


/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionHorizontalWindContrl
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionHorizontalWindContrl
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionHorizontalWindContrl(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}


/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionNatureWindContrl
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionNatureWindContrl
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionNatureWindContrl(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionElectricalHeating
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionElectricalHeating
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionElectricalHeating(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionEnergyConservation
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionEnergyConservation
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionEnergyConservation(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionShare
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionShare
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionShare(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}


/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionDualMode
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionDualMode
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionDualMode(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionFreshness
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionFreshness
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionFreshness(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionFreshAir
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionFreshAir
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionFreshAir(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}


/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionCleanIndoor
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionCleanIndoor
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionCleanIndoor(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionCleanOutdoor
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionCleanOutdoor
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionCleanOutdoor(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionSmartEye
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionSmartEye
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionSmartEye(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionVoice
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionVoice
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionVoice(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionCleanSmoke
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionCleanSmoke
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionCleanSmoke(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionBackgroundLamp
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionBackgroundLamp
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionBackgroundLamp(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionScreen
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionScreen
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionScreen(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionLED
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionLED
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionLED(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionIndoorOutdoorSwitch
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionIndoorOutdoorSwitch
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionIndoorOutdoorSwitch(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionIndoorFilterClear
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionIndoorFilterClear
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionIndoorFilterClear(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionLeftWind
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionLeftWind
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionLeftWind(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionRightWind
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionRightWind
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionRightWind(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionChargeBorad
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionChargeBorad
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionChargeBorad(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionHaveIRContrl
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionHaveIRContrl
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionHaveIRContrl(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionHaveWIFIContrl
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionHaveWIFIContrl
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionHaveWIFIContrl(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionEEPROMUpdate
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionEEPROMUpdate
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionEEPROMUpdate(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionIndoorTemperatureSensorTrouble
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionIndoorTemperatureSensorTrouble
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionIndoorTemperatureSensorTrouble(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionIndoorPipeTemperatureSensorTrouble
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionIndoorPipeTemperatureSensorTrouble
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionIndoorPipeTemperatureSensorTrouble(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionIndoorHumiditySensorTrouble
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionIndoorHumiditySensorTrouble
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionIndoorHumiditySensorTrouble(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionIndoorDrainsWaterPumpTrouble
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionIndoorDrainsWaterPumpTrouble
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionIndoorDrainsWaterPumpTrouble(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionIndoorFanMotorTrouble
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionIndoorFanMotorTrouble
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionIndoorFanMotorTrouble(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionPioneerGrillingProtectTrouble
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionPioneerGrillingProtectTrouble
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionPioneerGrillingProtectTrouble(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionIndoorVoltageZeroCrossDetectionTrouble
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionIndoorVoltageZeroCrossDetectionTrouble
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionIndoorVoltageZeroCrossDetectionTrouble(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionIndoorOutdoorCommunicationTrouble
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionIndoorOutdoorCommunicationTrouble
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionIndoorOutdoorCommunicationTrouble(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionIndoorContrlScreenCommunicationTrouble
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionIndoorContrlScreenCommunicationTrouble
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionIndoorContrlScreenCommunicationTrouble(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}


/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionIndoorContrlKeypadCommunicationTrouble
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionIndoorContrlKeypadCommunicationTrouble
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionIndoorContrlKeypadCommunicationTrouble(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionIndoorContrlWIFICommunicationTrouble
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionIndoorContrlWIFICommunicationTrouble
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionIndoorContrlWIFICommunicationTrouble(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionIndoorContrlChargeCommunicationTrouble
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionIndoorContrlChargeCommunicationTrouble
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionIndoorContrlChargeCommunicationTrouble(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionIndoorContrlEEPROMTrouble
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionIndoorContrlEEPROMTrouble
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionIndoorContrlEEPROMTrouble(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionRunFrequency
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionRunFrequency
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionRunFrequency(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionTargetFrequency
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionTargetFrequency
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionTargetFrequency(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionDriveFrequency
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionDriveFrequency
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionDriveFrequency(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionEnvironmentTemperature
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionEnvironmentTemperature
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionEnvironmentTemperature(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionCondenserTemperature
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionCondenserTemperature
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionCondenserTemperature(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionExhaustTemperature
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionExhaustTemperature
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionExhaustTemperature(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionTargetExhaustTemperature
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionTargetExhaustTemperature
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionTargetExhaustTemperature(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionOutdoorElectronicExpansion
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionOutdoorElectronicExpansion
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionOutdoorElectronicExpansion(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionUABH
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionUABH
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionUABH(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionUABL
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionUABL
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionUABL(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}


/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionUBCH
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionUBCH
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionUBCH(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionUBCL
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionUBCL
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionUBCL(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionUCAH
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionUCAH
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionUCAH(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionUCAL
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionUCAL
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionUCAL(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionIAB
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionIAB
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionIAB(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionIBC
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionIBC
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionIBC(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionICA
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionICA
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionICA(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}


/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionIUV
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionIUV
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionIUV(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionCocurrentBusVoltageH
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionCocurrentBusVoltageH
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionCocurrentBusVoltageH(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionCocurrentBusVoltageL
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionCocurrentBusVoltageL
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionCocurrentBusVoltageL(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionFourWayLimen
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionFourWayLimen
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionFourWayLimen(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionOutdoorRealityRuning
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionOutdoorRealityRuning
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionOutdoorRealityRuning(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionFanRuning
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionFanRuning
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionFanRuning(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionOutdoorForceIndoorWindPosition
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionOutdoorForceIndoorWindPosition
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionOutdoorForceIndoorWindPosition(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionOutdoorForceIndoorWindSpeed
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionOutdoorForceIndoorWindSpeed
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionOutdoorForceIndoorWindSpeed(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionOutdoorForceIndoorStop
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionOutdoorForceIndoorStop
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionOutdoorForceIndoorStop(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionShutdownByTemperatureContrl
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionShutdownByTemperatureContrl
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionShutdownByTemperatureContrl(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionOne4All
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionOne4All
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionOne4All(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionDehumidifierLimen
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionDehumidifierLimen
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionDehumidifierLimen(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionOutdoorDefrosting
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionOutdoorDefrosting
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionOutdoorDefrosting(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionOutdoorBypassDefrosting
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionOutdoorBypassDefrosting
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionOutdoorBypassDefrosting(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionOilReturn
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionOilReturn
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionOilReturn(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionOutdoorTroubleDisplay
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionOutdoorTroubleDisplay
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionOutdoorTroubleDisplay(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionOutdoorEEPROMDownload
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionOutdoorEEPROMDownload
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionOutdoorEEPROMDownload(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionOutdoorChargeBoard
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionOutdoorChargeBoard
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionOutdoorChargeBoard(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionCompressorRibbonHeater
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionCompressorRibbonHeater
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionCompressorRibbonHeater(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionCompressorBeforeHandheat
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionCompressorBeforeHandheat
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionCompressorBeforeHandheat(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionReinflation
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionReinflation
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionReinflation(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionOutdoorModeClash
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionOutdoorModeClash
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionOutdoorModeClash(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionOutdoorEEPROMTrouble
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionOutdoorEEPROMTrouble
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionOutdoorEEPROMTrouble(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionOutdoorPipeTemperatureSensorTrouble
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionOutdoorPipeTemperatureSensorTrouble
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionOutdoorPipeTemperatureSensorTrouble(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionOutdoorExhausTemperatureSensorTrouble
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionOutdoorExhausTemperatureSensorTrouble
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionOutdoorExhausTemperatureSensorTrouble(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionOutdoorEnvironmentTemperatureSensorTrouble
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionOutdoorEnvironmentTemperatureSensorTrouble
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionOutdoorEnvironmentTemperatureSensorTrouble(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionVoltageTransformerTrouble
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionVoltageTransformerTrouble
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionVoltageTransformerTrouble(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionCurrentTransformerTrouble
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionCurrentTransformerTrouble
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionCurrentTransformerTrouble(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionOutdoorContrlDriveCommunicationTrouble
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionOutdoorContrlDriveCommunicationTrouble
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionOutdoorContrlDriveCommunicationTrouble(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionIPMOvercurrentProtect
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionIPMOvercurrentProtect
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionIPMOvercurrentProtect(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionIPMOverheatingProtect
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionIPMOverheatingProtect
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionIPMOverheatingProtect(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionAlternatingCurrentOvervoltageProtect
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionAlternatingCurrentOvervoltageProtect
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionAlternatingCurrentOvervoltageProtect(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionAlternatingCurrentUndervoltageProtect
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionAlternatingCurrentUndervoltageProtect
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionAlternatingCurrentUndervoltageProtect(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionBusbarVoltageOvervoltageProtect
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionBusbarVoltageOvervoltageProtect
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionBusbarVoltageOvervoltageProtect(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}


/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionBusbarVoltageUndervoltageProtect
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionBusbarVoltageUndervoltageProtect
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionBusbarVoltageUndervoltageProtect(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionPFCOvercurrentProtect
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionPFCOvercurrentProtect
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionPFCOvercurrentProtect(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionOutdoorMaximumCurrentProtect
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionOutdoorMaximumCurrentProtect
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionOutdoorMaximumCurrentProtect(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionOutdoorEnvironmentOvertemperatureProtect
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionOutdoorEnvironmentOvertemperatureProtect
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionOutdoorEnvironmentOvertemperatureProtect(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionExhaustOvertemperatureProtect
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionExhaustOvertemperatureProtect
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionExhaustOvertemperatureProtect(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionCompressoPipeShellTemperatureProtect
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionCompressoPipeShellTemperatureProtect
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionCompressoPipeShellTemperatureProtect(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionIndoorAntiFreezingProtect
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionIndoorAntiFreezingProtect
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionIndoorAntiFreezingProtect(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionOutdoorPFCProtect
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionOutdoorPFCProtect
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionOutdoorPFCProtect(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionCompressoBootFail
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionCompressoBootFail
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionCompressoBootFail(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionCompressoStepOut
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionCompressoStepOut
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionCompressoStepOut(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionOutdoorFanLockRotor
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionOutdoorFanLockRotor
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionOutdoorFanLockRotor(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionOutdoorPieOverloadProtect
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionOutdoorPieOverloadProtect
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionOutdoorPieOverloadProtect(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionRefrigerantLeakage
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionRefrigerantLeakage
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionRefrigerantLeakage(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionCompressoModelMismatch
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionCompressoModelMismatch
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionCompressoModelMismatch(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionSystemLowFrequencyVibrationProtect
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionSystemLowFrequencyVibrationProtect
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionSystemLowFrequencyVibrationProtect(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionOutdoorRadiatorOvertemperatureProtect
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionOutdoorRadiatorOvertemperatureProtect
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionOutdoorRadiatorOvertemperatureProtect(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionSystemHypertonusProtect
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionSystemHypertonusProtect
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionSystemHypertonusProtect(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionInverterCocurrentOvervoltageTrouble
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionInverterCocurrentOvervoltageTrouble
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionInverterCocurrentOvervoltageTrouble(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionInverterCocurrentUndervoltageTrouble
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionInverterCocurrentUndervoltageTrouble
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionInverterCocurrentUndervoltageTrouble(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionInverterCocurrentOvercurrentTrouble
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionInverterCocurrentOvercurrentTrouble
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionInverterCocurrentOvercurrentTrouble(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionStepOutDetection
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionStepOutDetection
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionStepOutDetection(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionInverterEdgeFault
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionInverterEdgeFault
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionInverterEdgeFault(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionInverterLevelFault
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionInverterLevelFault
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionInverterLevelFault(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionPFC_IPMEdgeFault
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionPFC_1IPMEdgeFault
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionPFC_IPMEdgeFault(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionPFC_IPMLevelFault
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionPFC_1IPMLevelFault
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionPFC_IPMLevelFault(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionPFCPowerCutFault
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionPFCPowerCutFault
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionPFCPowerCutFault(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionPFCOvercurrentFault
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionPFCOvercurrentFault
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionPFCOvercurrentFault(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionDCVException
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionDCVException
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionDCVException(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionPFCLowVoltageFault
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionPFCLowVoltageFault
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionPFCLowVoltageFault(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}


/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionADOffsetAnomaliesFault
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionADOffsetAnomaliesFault
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionADOffsetAnomaliesFault(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionInverterPWMLogicFault
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionInverterPWMLogicFault
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionInverterPWMLogicFault(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionInverterPWMInitFault
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionInverterPWMInitFault
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionInverterPWMInitFault(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionPFCPWMLogicFault
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionPFCPWMLogicFault
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionPFCPWMLogicFault(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionPFC_PWMInitFault
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionPFC_1PWMInitFault
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionPFC_PWMInitFault(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionTemperatureAnomaly
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionTemperatureAnomaly
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionTemperatureAnomaly(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionMotorDataFault
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionMotorDataFault
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionMotorDataFault(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}


/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionMCEFault
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionMCEFault
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionMCEFault(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionEEPROMFault
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionEEPROMFault
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionEEPROMFault(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionOutdoorCoilOverloadUpFrequency
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionOutdoorCoilOverloadUpFrequency
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionOutdoorCoilOverloadUpFrequency(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}


/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionOutdoorCoilOverloadDownFrequency
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionOutdoorCoilOverloadDownFrequency
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionOutdoorCoilOverloadDownFrequency(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionIndoorCoilOverloadUpFrequency
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionIndoorCoilOverloadUpFrequency
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionIndoorCoilOverloadUpFrequency(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionIndoorCoilOverloadDownFrequency
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionIndoorCoilOverloadDownFrequency
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionIndoorCoilOverloadDownFrequency(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionPressureUpFrequency
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionPressureUpFrequency
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionPressureUpFrequency(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionPressureDownFrequency
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionPressureDownFrequency
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionPressureDownFrequency(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}


/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionIndoorCoilFreezingUpFrequency
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionIndoorCoilFreezingUpFrequency
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionIndoorCoilFreezingUpFrequency(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionIndoorCoilFreezingDownFrequency
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionIndoorCoilFreezingDownFrequency
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionIndoorCoilFreezingDownFrequency(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionCommunicationDownFrequency
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionCommunicationDownFrequency
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionCommunicationDownFrequency(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionModuleTemperaturelimitFrequency
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionModuleTemperaturelimitFrequency
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionModuleTemperaturelimitFrequency(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionModulationRatelimitFrequency
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionModulationRatelimitFrequency
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionModulationRatelimitFrequency(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}


/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionPhaseCurrentlimitFrequency
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionPhaseCurrentlimitFrequency
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionPhaseCurrentlimitFrequency(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionPowerSaveUpFrequency
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionPowerSaveUpFrequency
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionPowerSaveUpFrequency(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionPowerSaveDownFrequency
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionPowerSaveDownFrequency
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionPowerSaveDownFrequency(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionOvercurrentUpFrequency
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionOvercurrentUpFrequency
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionOvercurrentUpFrequency(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionOvercurrentDownFrequency
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionOvercurrentDownFrequency
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionOvercurrentDownFrequency(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionIndoorFanSpeedH
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionIndoorFanSpeedH
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionIndoorFanSpeedH(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}
/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionIndoorFanSpeed00L
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionIndoorFanSpeed00L
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionIndoorFanSpeed00L(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionPM25
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionPM25
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionPM25(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionPM25Level
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionPM25Level
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionPM25Level(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionPM25Percent
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionPM25Percent
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionPM25Percent(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionScreenLuminance
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionScreenLuminance
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionScreenLuminance(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionGeneralTimingShutdown
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionGeneralTimingShutdown
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionGeneralTimingShutdown(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionWindSpeedNumFN
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionWindSpeedNumFN
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionWindSpeedNumFN(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionSleepModeFN
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionSleepModeFN
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionSleepModeFN(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionCoolModeFN
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionCoolModeFN
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionCoolModeFN(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionPowerFN
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionPowerFN
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionPowerFN(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}


/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionWindDirectionFN
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionWindDirectionFN
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionWindDirectionFN(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}


/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionTemperatureFN
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionTemperatureFN
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionTemperatureFN(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionHumidityFN
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionHumidityFN
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionHumidityFN(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionSomatosensoryRealityTemperatureFN
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionSomatosensoryRealityTemperatureFN
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionSomatosensoryRealityTemperatureFN(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionTemperatureCompensationFN
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionTemperatureCompensationFN
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionTemperatureCompensationFN(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionTemperatureValueSwitchFN
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionTemperatureValueSwitchFN
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionTemperatureValueSwitchFN(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}


/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionGeneralTimingShutdownFN
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionGeneralTimingShutdownFN
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionGeneralTimingShutdownFN(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}


/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionRealityTimeFN
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionRealityTimeFN
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionRealityTimeFN(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionVerticalWindModeNum
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionVerticalWindModeNum
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionVerticalWindModeNum(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionVerticalWindFN
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionVerticalWindFN
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionVerticalWindFN(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionHorizontalWindFN
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionHorizontalWindFN
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionHorizontalWindFN(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionNatureWindFN
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionNatureWindFN
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionNatureWindFN(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionElectricalHeatingFN
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionElectricalHeatingFN
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionElectricalHeatingFN(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionDehumidificationModeFN
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionDehumidificationModeFN
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionDehumidificationModeFN(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}


/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionEnergyConservationFN
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionEnergyConservationFN
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionEnergyConservationFN(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionShareFN
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionShareFN
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionShareFN(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}


/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionEfficientFN
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionEfficientFN
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionEfficientFN(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionDualModeFN
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionDualModeFN
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionDualModeFN(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionFreshnessFN
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionFreshnessFN
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionFreshnessFN(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionFreshAirFN
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionFreshAirFN
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionFreshAirFN(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionCleanIndoorFN
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionCleanIndoorFN
   (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionFreshAirFN(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}


/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionCleanOutdoorFN
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionCleanOutdoorFN
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionCleanOutdoorFN(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionSmartEyeFN
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionSmartEyeFN
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionSmartEyeFN(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionMuteFN
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionMuteFN__Ljava_lang_String_2
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionMuteFN(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionMuteFN
 * Signature: (Ljava/lang/String;Z)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionMuteFN__Ljava_lang_String_2Z
    (JNIEnv *env, jclass obj, jstring deviceId, jboolean isFunction){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionMuteFN(c_deviceId,(bool)isFunction);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionVoiceFN
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionVoiceFN
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionVoiceFN(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}


/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionCleanSmokeFN
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionCleanSmokeFN
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionCleanSmokeFN(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionBackgroundLampFN
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionBackgroundLampFN
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionBackgroundLampFN(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionScreenFN
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionScreenFN
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionScreenFN(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionLEDFN
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionLEDFN
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionLEDFN(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionIndoorOutdoorSwitchFN
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionIndoorOutdoorSwitchFN
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionIndoorOutdoorSwitchFN(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionIndoorFilterClearFN
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionIndoorFilterClearFN
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionIndoorFilterClearFN(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionLeftFanContrlFN
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionLeftFanContrlFN
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionLeftFanContrlFN(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionRightFanContrlFN
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionRightFanContrlFN
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionRightFanContrlFN(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirconditionContrlRate
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirconditionContrlRate
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirconditionContrlRate(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}


/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setDehumidifierPower
 * Signature: (Ljava/lang/String;II)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setDehumidifierPower
    (JNIEnv *env, jclass obj, jstring deviceId, jint power, jint soundSet){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    CByte cbyte = deviceWrapper.setDehumidifierPower(c_deviceId,(int)power,(int)soundSet);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    return	javaArray;
        
        
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setDehumidifierSmartStatus
 * Signature: (Ljava/lang/String;Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setDehumidifierSmartStatus
    (JNIEnv *env, jclass obj, jstring deviceId, jstring smartStatus){
    char * c_deviceId = jstringTostring(env,deviceId);
    char * c_smartStatus = jstringTostring(env,smartStatus);
    bool ret = deviceWrapper.setDehumidifierSmartStatus(c_deviceId,c_smartStatus);
    free(deviceId);
    free(smartStatus);
    return (jboolean)ret;
}
/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setDehumidifierWindSpeed
 * Signature: (Ljava/lang/String;Ljava/lang/String;I)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setDehumidifierWindSpeed
    (JNIEnv *env, jclass obj, jstring deviceId, jstring windSpeed, jint soundSet){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    char * c_windSpeed = jstringTostring(env,windSpeed);
    CByte cbyte = deviceWrapper.setDehumidifierWindSpeed(c_deviceId,c_windSpeed,(int)soundSet);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    free(c_windSpeed);
    return	javaArray;
        
        
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setDehumidifierMode
 * Signature: (Ljava/lang/String;Ljava/lang/String;I)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setDehumidifierMode
    (JNIEnv *env, jclass obj, jstring deviceId, jstring mode, jint soundSet){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    char * c_mode = jstringTostring(env,mode);
    CByte cbyte = deviceWrapper.setDehumidifierWindSpeed(c_deviceId,c_mode,(int)soundSet);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    free(c_mode);
    return	javaArray;
        
        
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setDehumidifierTimingSwitchMachine
 * Signature: (Ljava/lang/String;III)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setDehumidifierTimingSwitchMachine
    (JNIEnv *env, jclass obj, jstring deviceId, jint timingEnable,jint timingValue, jint soundSet){
        jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    CByte cbyte = deviceWrapper.setDehumidifierTimingSwitchMachine(c_deviceId,(int)timingEnable,(int)timingValue,(int)soundSet);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    return	javaArray;
        
        
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setDehumidifierHumidityValue
 * Signature: (Ljava/lang/String;II)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setDehumidifierHumidityValue
    (JNIEnv *env, jclass obj, jstring deviceId, jint humidityValue, jint soundSet){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    CByte cbyte = deviceWrapper.setDehumidifierHumidityValue(c_deviceId,(int)humidityValue,(int)soundSet);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    return	javaArray;
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setDehumidifierTemperature
 * Signature: (Ljava/lang/String;II)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setDehumidifierTemperature
    (JNIEnv *env, jclass obj, jstring deviceId, jint temperature, jint soundSet){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    CByte cbyte = deviceWrapper.setDehumidifierTemperature(c_deviceId,(int)temperature,(int)soundSet);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    return	javaArray;
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setDehumidifierElectricalHeating
 * Signature: (Ljava/lang/String;II)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setDehumidifierElectricalHeating
    (JNIEnv *env, jclass obj, jstring deviceId, jint electricalHeating, jint soundSet){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    CByte cbyte = deviceWrapper.setDehumidifierElectricalHeating(c_deviceId,(int)electricalHeating,(int)soundSet);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    return	javaArray;
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setDehumidifierWaterPumpPower
 * Signature: (Ljava/lang/String;II)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setDehumidifierWaterPumpPower
    (JNIEnv *env, jclass obj, jstring deviceId, jint waterPump, jint soundSet){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    CByte cbyte = deviceWrapper.setDehumidifierWaterPumpPower(c_deviceId,(int)waterPump,(int)soundSet);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    return	javaArray;
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setDehumidifierAnionPower
 * Signature: (Ljava/lang/String;II)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setDehumidifierAnionPower
    (JNIEnv *env, jclass obj, jstring deviceId, jint anionPower, jint soundSet){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    CByte cbyte = deviceWrapper.setDehumidifierAnionPower(c_deviceId,(int)anionPower,(int)soundSet);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    return	javaArray;
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getDehumidifierOnlineStatus
 * Signature: (Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getDehumidifierOnlineStatus
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    bool ret = deviceWrapper.getDehumidifierOnlineStatus(c_deviceId);
    free(deviceId);
    return (jboolean)ret;
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getDehumidifierSmartStatus
 * Signature: (Ljava/lang/String;)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getDehumidifierSmartStatus
    (JNIEnv *env, jclass obj, jstring deviceId){
    jstring strret=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    const char * c_ret = deviceWrapper.getDehumidifierSmartStatus(c_deviceId).c_str();
    strret=env->NewStringUTF(c_ret);
    free(c_deviceId);
    return strret;
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getDehumidifierSetPowerOnDuration
 * Signature: (Ljava/lang/String;)J
 */
JNIEXPORT jlong JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getDehumidifierSetPowerOnDuration
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    long ret = deviceWrapper.getDehumidifierSetPowerOnDuration(c_deviceId);
    free(c_deviceId);
    return jlong(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getDehumidifierSetPowerOffDuration
 * Signature: (Ljava/lang/String;)J
 */
JNIEXPORT jlong JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getDehumidifierSetPowerOffDuration
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    long ret = deviceWrapper.getDehumidifierSetPowerOffDuration(c_deviceId);
    free(c_deviceId);
    return jlong(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getDehumidifierSetModeDuration
 * Signature: (Ljava/lang/String;)J
 */
JNIEXPORT jlong JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getDehumidifierSetModeDuration
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    long ret = deviceWrapper.getDehumidifierSetModeDuration(c_deviceId);
    free(c_deviceId);
    return jlong(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getDehumidifierSequence
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getDehumidifierSequence
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getDehumidifierSetModeDuration(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getDehumidifierResult
 * Signature: (Ljava/lang/String;)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getDehumidifierResult
    (JNIEnv *env, jclass obj, jstring deviceId){
    jstring strret=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    const char * c_ret = deviceWrapper.getDehumidifierResult(c_deviceId).c_str();
    strret=env->NewStringUTF(c_ret);
    free(c_deviceId);
    return strret;
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getDehumidifierWindSpeed
 * Signature: (Ljava/lang/String;)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getDehumidifierWindSpeed
    (JNIEnv *env, jclass obj, jstring deviceId){
    jstring strret=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    const char * c_ret = deviceWrapper.getDehumidifierWindSpeed(c_deviceId).c_str();
    strret=env->NewStringUTF(c_ret);
    free(c_deviceId);
    return strret;
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getDehumidifierMode
 * Signature: (Ljava/lang/String;)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getDehumidifierMode
    (JNIEnv *env, jclass obj, jstring deviceId){
    jstring strret=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    const char * c_ret = deviceWrapper.getDehumidifierMode(c_deviceId).c_str();
    strret=env->NewStringUTF(c_ret);
    free(c_deviceId);
    return strret;
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getDehumidifierPower
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getDehumidifierPower
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getDehumidifierPower(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getDehumidifierHumidityValueSet
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getDehumidifierHumidityValueSet
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getDehumidifierHumidityValueSet(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getDehumidifierHumidityValueIndoor
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getDehumidifierHumidityValueIndoor
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getDehumidifierHumidityValueIndoor(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getDehumidifierTimeValid
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getDehumidifierTimeValid
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getDehumidifierTimeValid(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getDehumidifierTimerValue
 * Signature: (Ljava/lang/String;)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getDehumidifierTimerValue
    (JNIEnv *env, jclass obj, jstring deviceId){
    jstring strret=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    const char * c_ret = deviceWrapper.getDehumidifierTimerValue(c_deviceId).c_str();
    strret=env->NewStringUTF(c_ret);
    free(c_deviceId);
    return strret;
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getDehumidifierEletricalHeating
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getDehumidifierEletricalHeating
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getDehumidifierEletricalHeating(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getDehumidifierIndoorTempStatus
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getDehumidifierIndoorTempStatus
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getDehumidifierIndoorTempStatus(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getDehumidifierWaterPumpStatus
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getDehumidifierWaterPumpStatus
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getDehumidifierWaterPumpStatus(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getDehumidifierAnionStatus
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getDehumidifierAnionStatus
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getDehumidifierAnionStatus(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getDehumidifierFilterNetCleanWarning
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getDehumidifierFilterNetCleanWarning
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getDehumidifierFilterNetCleanWarning(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getDehumidifierHumidSensorError
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getDehumidifierHumidSensorError
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getDehumidifierHumidSensorError(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getDehumidifierPumpTempratureError
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getDehumidifierPumpTempratureError
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getDehumidifierPumpTempratureError(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}


/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getDehumidifierIndoorTempratureError
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getDehumidifierIndoorTempratureError
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getDehumidifierIndoorTempratureError(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getDehumidifierWaterFullWarning
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getDehumidifierWaterFullWarning
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getDehumidifierWaterFullWarning(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getDehumidifierWaterPumpWarning
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getDehumidifierWaterPumpWarning
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getDehumidifierWaterPumpWarning(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getDehumidifierSmartWindFN
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getDehumidifierSmartWindFN
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getDehumidifierSmartWindFN(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getDehumidifierHighWindFN
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getDehumidifierHighWindFN
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getDehumidifierHighWindFN(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getDehumidifierMediumWindFN
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getDehumidifierMediumWindFN
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getDehumidifierMediumWindFN(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getDehumidifierLowWindFN
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getDehumidifierLowWindFN
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getDehumidifierLowWindFN(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getDehumidifierContinueModeFN
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getDehumidifierContinueModeFN
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getDehumidifierContinueModeFN(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getDehumidifierNormalModeFN
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getDehumidifierNormalModeFN
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getDehumidifierNormalModeFN(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getDehumidifierAutoModeFN
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getDehumidifierAutoModeFN
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getDehumidifierAutoModeFN(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getDehumidifierTimerControlFN
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getDehumidifierTimerControlFN
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getDehumidifierTimerControlFN(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getDehumidifierElectricHeatFN
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getDehumidifierElectricHeatFN
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getDehumidifierElectricHeatFN(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getDehumidifierElectricHeatSetTemperatureFN
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getDehumidifierElectricHeatSetTemperatureFN
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getDehumidifierElectricHeatSetTemperatureFN(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getDehumidifierIndoorHumidityFN
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getDehumidifierIndoorHumidityFN
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getDehumidifierIndoorHumidityFN(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getDehumidifierWaterPumpFN
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getDehumidifierWaterPumpFN
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getDehumidifierWaterPumpFN(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getDehumidifierAnionFN
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getDehumidifierAnionFN
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getDehumidifierAnionFN(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getDehumidifierElectronicDetectFN
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getDehumidifierElectronicDetectFN
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getDehumidifierElectronicDetectFN(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getDehumidifierPowerFN
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getDehumidifierPowerFN
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getDehumidifierPowerFN(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getDehumidifierEEPROMWriteFN
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getDehumidifierEEPROMWriteFN
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getDehumidifierEEPROMWriteFN(c_deviceId);
    free(c_deviceId);
    return jint(ret);
        
        
}


/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setAircleanerSmartStatus
 * Signature: (Ljava/lang/String;Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setAircleanerSmartStatus
    (JNIEnv *env, jclass obj, jstring deviceId, jstring smartStatus){
    char * c_deviceId = jstringTostring(env,deviceId);
    char * c_smartStatus = jstringTostring(env,smartStatus);
    bool ret = deviceWrapper.setAircleanerSmartStatus(c_deviceId,c_smartStatus);
    free(deviceId);
    free(smartStatus);
    return (jboolean)ret;
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setAircleanerPower
 * Signature: (Ljava/lang/String;II)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setAircleanerPower
    (JNIEnv *env, jclass obj, jstring deviceId, jint power, jint soundSet){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    CByte cbyte = deviceWrapper.setAircleanerPower(c_deviceId,(int)power,(int)soundSet);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    return	javaArray;
        
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setAircleanerWindSpeed
 * Signature: (Ljava/lang/String;Ljava/lang/String;I)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setAircleanerWindSpeed
    (JNIEnv *env, jclass obj, jstring deviceId, jstring windSpeed, jint soundSet){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    char * c_windSpeed = jstringTostring(env,windSpeed);
    CByte cbyte = deviceWrapper.setAircleanerWindSpeed(c_deviceId,c_windSpeed,(int)soundSet);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    free(c_windSpeed);
    return	javaArray;
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setAircleanerMode
 * Signature: (Ljava/lang/String;Ljava/lang/String;I)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setAircleanerMode
    (JNIEnv *env, jclass obj, jstring deviceId, jstring mode, jint soundSet){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    char * c_mode = jstringTostring(env,mode);
    CByte cbyte = deviceWrapper.setAircleanerMode(c_deviceId,c_mode,(int)soundSet);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    free(c_mode);
    return	javaArray;
        
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setAircleanerTimingSwitchMachine
 * Signature: (Ljava/lang/String;III)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setAircleanerTimingSwitchMachine
    (JNIEnv *env, jclass obj, jstring deviceId, jint timingEnable,jint timingValue, jint soundSet){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    CByte cbyte = deviceWrapper.setAircleanerTimingSwitchMachine(c_deviceId,(int)timingEnable,(int)timingValue,(int)soundSet);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    return	javaArray;
        
        
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setAircleanerChildClockPower
 * Signature: (Ljava/lang/String;II)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setAircleanerChildClockPower
    (JNIEnv *env, jclass obj, jstring deviceId,jint childClockPower, jint soundSet){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    CByte cbyte = deviceWrapper.setAircleanerChildClockPower(c_deviceId,(int)childClockPower,(int)soundSet);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    return	javaArray;
        
        
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setAircleanerWaterIonPower
 * Signature: (Ljava/lang/String;II)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setAircleanerWaterIonPower
    (JNIEnv *env, jclass obj, jstring deviceId,jint waterIonPower, jint soundSet){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    CByte cbyte = deviceWrapper.setAircleanerWaterIonPower(c_deviceId,(int)waterIonPower,(int)soundSet);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    return	javaArray;
        
        
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setAircleanerHumidifierPower
 * Signature: (Ljava/lang/String;II)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setAircleanerHumidifierPower
    (JNIEnv *env, jclass obj, jstring deviceId,jint humidifierPower, jint soundSet){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    CByte cbyte = deviceWrapper.setAircleanerHumidifierPower(c_deviceId,(int)humidifierPower,(int)soundSet);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    return	javaArray;
        
        
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setAircleanerHumidityValue
 * Signature: (Ljava/lang/String;II)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setAircleanerHumidityValue
    (JNIEnv *env, jclass obj, jstring deviceId,jint humidityValue, jint soundSet){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    CByte cbyte = deviceWrapper.setAircleanerHumidityValue(c_deviceId,(int)humidityValue,(int)soundSet);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    return	javaArray;
        
        
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAircleanerOnlineStatus
 * Signature: (Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAircleanerOnlineStatus
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    bool ret = deviceWrapper.getAircleanerOnlineStatus(c_deviceId);
    free(deviceId);
    return (jboolean)ret;
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAircleanerSmartStatus
 * Signature: (Ljava/lang/String;)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAircleanerSmartStatus
    (JNIEnv *env, jclass obj, jstring deviceId){
    jstring strret=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    const char * c_ret = deviceWrapper.getAircleanerSmartStatus(c_deviceId).c_str();
    strret=env->NewStringUTF(c_ret);
    free(c_deviceId);
    return strret;
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAircleanerSetPowerOnDuration
 * Signature: (Ljava/lang/String;)J
 */
JNIEXPORT jlong JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAircleanerSetPowerOnDuration
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    long ret = deviceWrapper.getAircleanerSetPowerOnDuration(c_deviceId);
    free(c_deviceId);
    return jlong(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAircleanerSetPowerOffDuration
 * Signature: (Ljava/lang/String;)J
 */
JNIEXPORT jlong JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAircleanerSetPowerOffDuration
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    long ret = deviceWrapper.getAircleanerSetPowerOffDuration(c_deviceId);
    free(c_deviceId);
    return jlong(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAircleanerSetModeDuration
 * Signature: (Ljava/lang/String;)J
 */
JNIEXPORT jlong JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAircleanerSetModeDuration
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    long ret = deviceWrapper.getAircleanerSetModeDuration(c_deviceId);
    free(c_deviceId);
    return jlong(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAircleanerHumidifyDuration
 * Signature: (Ljava/lang/String;)J
 */
JNIEXPORT jlong JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAircleanerHumidifyDuration
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    long ret = deviceWrapper.getAircleanerHumidifyDuration(c_deviceId);
    free(c_deviceId);
    return jlong(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAircleanerAnionDuration
 * Signature: (Ljava/lang/String;)J
 */
JNIEXPORT jlong JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAircleanerAnionDuration
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    long ret = deviceWrapper.getAircleanerAnionDuration(c_deviceId);
    free(c_deviceId);
    return jlong(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAircleanerSequence
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAircleanerSequence
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAircleanerSequence(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAircleanerResult
 * Signature: (Ljava/lang/String;)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAircleanerResult
    (JNIEnv *env, jclass obj, jstring deviceId){
    jstring strret=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    const char * c_ret = deviceWrapper.getAircleanerResult(c_deviceId).c_str();
    strret=env->NewStringUTF(c_ret);
    free(c_deviceId);
    return strret;
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAircleanerWindSpeed
 * Signature: (Ljava/lang/String;)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAircleanerWindSpeed
    (JNIEnv *env, jclass obj, jstring deviceId){
    jstring strret=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    const char * c_ret = deviceWrapper.getAircleanerWindSpeed(c_deviceId).c_str();
    strret=env->NewStringUTF(c_ret);
    free(c_deviceId);
    return strret;
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAircleanerMode
 * Signature: (Ljava/lang/String;)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAircleanerMode
    (JNIEnv *env, jclass obj, jstring deviceId){
    jstring strret=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    const char * c_ret = deviceWrapper.getAircleanerMode(c_deviceId).c_str();
    strret=env->NewStringUTF(c_ret);
    free(c_deviceId);
    return strret;
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAircleanerPower
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAircleanerPower
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAircleanerPower(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAircleanerHumidityValueSet
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAircleanerHumidityValueSet
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAircleanerHumidityValueSet(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAircleanerHumidityPower
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAircleanerHumidityPower
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAircleanerHumidityPower(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAircleanerAnionPower
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAircleanerAnionPower
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAircleanerAnionPower(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAircleanerHumidifyIndoor
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAircleanerHumidifyIndoor
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAircleanerHumidifyIndoor(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAircleanerTimeStatus
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAircleanerTimeStatus
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAircleanerTimeStatus(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAircleanerTimerValue
 * Signature: (Ljava/lang/String;)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAircleanerTimerValue
    (JNIEnv *env, jclass obj, jstring deviceId){
    jstring strret=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    const char * c_ret = deviceWrapper.getAircleanerTimerValue(c_deviceId).c_str();
    strret=env->NewStringUTF(c_ret);
    free(c_deviceId);
    return strret;
}


/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAircleanerMotorSpeed
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAircleanerMotorSpeed
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAircleanerMotorSpeed(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAircleanerAirQuality
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAircleanerAirQuality
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAircleanerAirQuality(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAircleanerAirQualityPercent
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAircleanerAirQualityPercent
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAircleanerAirQualityPercent(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAircleanerRelativeHumidityValue
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAircleanerRelativeHumidityValue
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAircleanerRelativeHumidityValue(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAircleanerChildLockStatus
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAircleanerChildLockStatus
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAircleanerChildLockStatus(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAircleanerWaterionStatus
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAircleanerWaterionStatus
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAircleanerWaterionStatus(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAircleanerHumidityStatus
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAircleanerHumidityStatus
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAircleanerHumidityStatus(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAircleanerChangeFilterError
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAircleanerChangeFilterError
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAircleanerChangeFilterError(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAircleanerHumidityWheelError
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAircleanerHumidityWheelError
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAircleanerHumidityWheelError(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAircleanerWaterSinkEmptyError
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAircleanerWaterSinkEmptyError
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAircleanerWaterSinkEmptyError(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAircleanerWaterSinkNotSetup
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAircleanerWaterSinkNotSetup
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAircleanerWaterSinkNotSetup(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAircleanerHumiditySensorError
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAircleanerHumiditySensorError
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAircleanerHumiditySensorError(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAircleanerMotorError
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAircleanerMotorError
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAircleanerMotorError(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAircleanerDustSensorError
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAircleanerDustSensorError
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAircleanerDustSensorError(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAircleanerSmellSensorError
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAircleanerSmellSensorError
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAircleanerSmellSensorError(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAircleanerLeanError
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAircleanerLeanError
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAircleanerLeanError(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAircleanerSettingHumid
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAircleanerSettingHumid
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAircleanerSettingHumid(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAircleanerCleanSpeedAutoFN
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAircleanerCleanSpeedAutoFN
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAircleanerCleanSpeedAutoFN(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAircleanerCleanSpeedDelSmokeFN
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAircleanerCleanSpeedDelSmokeFN
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAircleanerCleanSpeedDelSmokeFN(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAircleanerCleanSpeedHighFN
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAircleanerCleanSpeedHighFN
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAircleanerCleanSpeedHighFN(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAircleanerCleanSpeedMiddleFN
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAircleanerCleanSpeedMiddleFN
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAircleanerCleanSpeedMiddleFN(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAircleanerCleanSpeedLowFN
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAircleanerCleanSpeedLowFN
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAircleanerCleanSpeedLowFN(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAircleanerCleanModeSleepFN
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAircleanerCleanModeSleepFN
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAircleanerCleanModeSleepFN(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAircleanerCleanModeMuteFN
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAircleanerCleanModeMuteFN
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAircleanerCleanModeMuteFN(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAircleanerCleanModeSmartFN
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAircleanerCleanModeSmartFN
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAircleanerCleanModeSmartFN(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAircleanerCleanModeDelTasteFN
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAircleanerCleanModeDelTasteFN
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAircleanerCleanModeDelTasteFN(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAircleanerCleanModeDelSmokeFN
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAircleanerCleanModeDelSmokeFN
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAircleanerCleanModeDelSmokeFN(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAircleanerGeneralTimingFN
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAircleanerGeneralTimingFN
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAircleanerGeneralTimingFN(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}


/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAircleanerChildLockFN
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAircleanerChildLockFN
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAircleanerChildLockFN(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAircleanerWaterIonFN
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAircleanerWaterIonFN
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAircleanerWaterIonFN(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAircleanerDehumidifierFN
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAircleanerDehumidifierFN
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAircleanerDehumidifierFN(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAircleanerCleanMachineFN
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAircleanerCleanMachineFN
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAircleanerCleanMachineFN(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAircleanerEEpromReadWriteFN
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAircleanerEEpromReadWriteFN
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAircleanerEEpromReadWriteFN(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}


/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAircleanerPowerDetectFN
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAircleanerPowerDetectFN
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAircleanerPowerDetectFN(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}



/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setAirfanSmartStatus
 * Signature: (Ljava/lang/String;Ljava/lang/String;)[B
 */
JNIEXPORT jboolean JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setAirfanSmartStatus
    (JNIEnv *env, jclass obj, jstring deviceId, jstring smartStatus){
    char * c_deviceId = jstringTostring(env,deviceId);
    char * c_smartStatus = jstringTostring(env,smartStatus);
    bool ret = deviceWrapper.setAirfanSmartStatus(c_deviceId,c_smartStatus);
    free(deviceId);
    free(smartStatus);
    return (jboolean)ret;
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setAirfanPower
 * Signature: (Ljava/lang/String;II)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setAirfanPower
    (JNIEnv *env, jclass obj, jstring deviceId, jint power, jint soundSet){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    CByte cbyte = deviceWrapper.setAirfanPower(c_deviceId,(int)power,(int)soundSet);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    return	javaArray;
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setAirfanWindSpeed
 * Signature: (Ljava/lang/String;Ljava/lang/String;I)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setAirfanWindSpeed
    (JNIEnv *env, jclass obj, jstring deviceId, jstring windSpeed, jint soundSet){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    char * c_windSpeed = jstringTostring(env,windSpeed);
    CByte cbyte = deviceWrapper.setAirfanWindSpeed(c_deviceId,c_windSpeed,(int)soundSet);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    free(c_windSpeed);
    return	javaArray;
        
        
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setAirfanMode
 * Signature: (Ljava/lang/String;Ljava/lang/String;I)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setAirfanMode
    (JNIEnv *env, jclass obj, jstring deviceId, jstring mode, jint soundSet){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    char * c_mode = jstringTostring(env,mode);
    CByte cbyte = deviceWrapper.setAirfanMode(c_deviceId,c_mode,(int)soundSet);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    free(c_mode);
    return	javaArray;
        
        
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setAirfanTimingSwitchMachine
 * Signature: (Ljava/lang/String;III)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setAirfanTimingSwitchMachine
    (JNIEnv *env, jclass obj, jstring deviceId, jint timingEnable,jint timingValue, jint soundSet){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    CByte cbyte = deviceWrapper.setAirfanTimingSwitchMachine(c_deviceId,(int)timingEnable,(int)timingValue,(int)soundSet);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    return	javaArray;
        
        
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirfanOnlineStatus
 * Signature: (Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirfanOnlineStatus
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    bool ret = deviceWrapper.getAirfanOnlineStatus(c_deviceId);
    free(deviceId);
    return (jboolean)ret;
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirfanSmartStatus
 * Signature: (Ljava/lang/String;)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirfanSmartStatus
    (JNIEnv *env, jclass obj, jstring deviceId){
    jstring strret=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    const char * c_ret = deviceWrapper.getAirfanSmartStatus(c_deviceId).c_str();
    strret=env->NewStringUTF(c_ret);
    free(c_deviceId);
    return strret;
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirfanSetPowerOnDuration
 * Signature: (Ljava/lang/String;)J
 */
JNIEXPORT jlong JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirfanSetPowerOnDuration
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    long ret = deviceWrapper.getAirfanSetPowerOnDuration(c_deviceId);
    free(c_deviceId);
    return jlong(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirfanSetPowerOffDuration
 * Signature: (Ljava/lang/String;)J
 */
JNIEXPORT jlong JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirfanSetPowerOffDuration
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    long ret = deviceWrapper.getAirfanSetPowerOffDuration(c_deviceId);
    free(c_deviceId);
    return jlong(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirfanSetModeDuration
 * Signature: (Ljava/lang/String;)J
 */
JNIEXPORT jlong JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirfanSetModeDuration
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    long ret = deviceWrapper.getAirfanSetModeDuration(c_deviceId);
    free(c_deviceId);
    return jlong(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirfanSequence
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirfanSequence
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirfanSequence(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirfanResult
 * Signature: (Ljava/lang/String;)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirfanResult
    (JNIEnv *env, jclass obj, jstring deviceId){
    jstring strret=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    const char * c_ret = deviceWrapper.getAirfanResult(c_deviceId).c_str();
    strret=env->NewStringUTF(c_ret);
    free(c_deviceId);
    return strret;
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirfanWindSpeed
 * Signature: (Ljava/lang/String;)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirfanWindSpeed
    (JNIEnv *env, jclass obj, jstring deviceId){
    jstring strret=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    const char * c_ret = deviceWrapper.getAirfanWindSpeed(c_deviceId).c_str();
    strret=env->NewStringUTF(c_ret);
    free(c_deviceId);
    return strret;
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirfanMode
 * Signature: (Ljava/lang/String;)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirfanMode
    (JNIEnv *env, jclass obj, jstring deviceId){
    jstring strret=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    const char * c_ret = deviceWrapper.getAirfanMode(c_deviceId).c_str();
    strret=env->NewStringUTF(c_ret);
    free(c_deviceId);
    return strret;
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirfanPower
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirfanPower
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirfanPower(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirfanHumidityIndoor
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirfanHumidityIndoor
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirfanHumidityIndoor(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirfanHumidityOutdoor
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirfanHumidityOutdoor
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirfanHumidityOutdoor(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirfanTemperatureIndoor
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirfanTemperatureIndoor
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirfanTemperatureIndoor(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirfanTemperatureOutdoor
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirfanTemperatureOutdoor
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirfanTemperatureOutdoor(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirfanCO2Indoor
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirfanCO2Indoor
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirfanCO2Indoor(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirfanSuspendMode
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirfanSuspendMode
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirfanSuspendMode(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirfanIsTiming
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirfanIsTiming
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirfanIsTiming(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirfanTimingTime
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirfanTimingTime
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirfanTimingTime(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirfanOuterFanSpeed
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirfanOuterFanSpeed
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirfanOuterFanSpeed(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirfanInnerFanSpeed
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirfanInnerFanSpeed
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirfanInnerFanSpeed(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirfanInnerTempratureValid
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirfanInnerTempratureValid
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirfanInnerTempratureValid(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirfanInnerHumidityValid
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirfanInnerHumidityValid
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirfanInnerHumidityValid(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirfanInnerco2DensityValid
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirfanInnerco2DensityValid
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirfanInnerco2DensityValid(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirfanOuterTempratureValid
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirfanOuterTempratureValid
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirfanOuterTempratureValid(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirfanOuterHumidityValid
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirfanOuterHumidityValid
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirfanOuterHumidityValid(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirfanFilterIfReplace
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirfanFilterIfReplace
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirfanFilterIfReplace(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}


/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirfanOuterFanIfFault
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirfanOuterFanIfFault
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirfanOuterFanIfFault(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirfanInnerFanIfFault
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirfanInnerFanIfFault
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirfanInnerFanIfFault(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirfanOuterTemperatureSensorIfFault
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirfanOuterTemperatureSensorIfFault
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirfanOuterTemperatureSensorIfFault(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirfanOuterHumiditySensorIfFault
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirfanOuterHumiditySensorIfFault
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirfanOuterHumiditySensorIfFault(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirfanCo2SensorIfFault
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirfanCo2SensorIfFault
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirfanCo2SensorIfFault(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}


/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirfanInnerTemperatureSensorFault
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirfanInnerTemperatureSensorFault
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirfanInnerTemperatureSensorFault(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}


/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirfanInnerHumiditySensorFault
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirfanInnerHumiditySensorFault
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirfanInnerHumiditySensorFault(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirfanSpeedSupportNumberFN
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirfanSpeedSupportNumberFN
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirfanSpeedSupportNumberFN(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirfanfullheatModeFN
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirfanfullheatModeFN
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirfanfullheatModeFN(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirfanDirectModeFN
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirfanDirectModeFN
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirfanDirectModeFN(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirfanIndoorModeFN
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirfanIndoorModeFN
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirfanIndoorModeFN(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirfanTiming
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirfanTiming
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirfanTiming(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirfanPowerFN
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirfanPowerFN
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirfanPowerFN(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirfanIfUpdateEEPROM
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirfanIfUpdateEEPROM
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirfanIfUpdateEEPROM(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getAirfanBatteryIFdetection
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getAirfanBatteryIFdetection
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getAirfanBatteryIFdetection(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setSensorsSmartStatus
 * Signature: (Ljava/lang/String;Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setSensorsSmartStatus
    (JNIEnv *env, jclass obj, jstring deviceId, jstring smartStatus){
    char * c_deviceId = jstringTostring(env,deviceId);
    char * c_smartStatus = jstringTostring(env,smartStatus);
    bool ret = deviceWrapper.setSensorsSmartStatus(c_deviceId,c_smartStatus);
    free(deviceId);
    free(smartStatus);
    return (jboolean)ret;
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setSensorsPM25Power
 * Signature: (Ljava/lang/String;I)Z
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setSensorsPM25Power
    (JNIEnv *env, jclass obj, jstring deviceId, jint power){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    CByte cbyte = deviceWrapper.setSensorsPM25Power(c_deviceId,(int)power);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    return	javaArray;
        
    
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setSensorsPower
 * Signature: (Ljava/lang/String;II)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setSensorsPower
    (JNIEnv *env, jclass obj, jstring deviceId, jint power,jint sensorID){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    CByte cbyte = deviceWrapper.setSensorsPower(c_deviceId,(int)power,(int)sensorID);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    return	javaArray;
        
        
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setResponseFrequency
 * Signature: (Ljava/lang/String;III)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setResponseFrequency
    (JNIEnv *env, jclass obj, jstring deviceId, jint responseFrequencyValid, jint responseID,jint responseFrequency){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    CByte cbyte = deviceWrapper.setResponseFrequency(c_deviceId,(int)responseFrequencyValid,(int)responseID,(int)responseFrequency);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    return	javaArray;
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getSensorsOnlineStatus
 * Signature: (Ljava/lang/String;)[B
 */
JNIEXPORT jboolean JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getSensorsOnlineStatus
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    bool ret = deviceWrapper.getSensorsOnlineStatus(c_deviceId);
    free(deviceId);
    return (jboolean)ret;
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getSensorsSmartStatus
 * Signature: (Ljava/lang/String;)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getSensorsSmartStatus
    (JNIEnv *env, jclass obj, jstring deviceId){
    jstring strret=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    const char * c_ret = deviceWrapper.getSensorsSmartStatus(c_deviceId).c_str();
    strret=env->NewStringUTF(c_ret);
    free(c_deviceId);
    return strret;
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getSensorsTemperatureSensorID
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getSensorsTemperatureSensorID
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getSensorsTemperatureSensorID(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getSensorsTemperatureValueValid
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getSensorsTemperatureValueValid
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getSensorsTemperatureValueValid(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getSensorsTemperatureSensorPowerStatus
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getSensorsTemperatureSensorPowerStatus
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getSensorsTemperatureSensorPowerStatus(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getSensorsTemperatureInterval
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getSensorsTemperatureInterval
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getSensorsTemperatureInterval(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getSensorsTemperatureValue
 * Signature: (Ljava/lang/String;)F
 */
JNIEXPORT jfloat JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getSensorsTemperatureValue
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    float ret = deviceWrapper.getSensorsTemperatureValue(c_deviceId);
    free(c_deviceId);
    return jfloat(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getSensorsHumiditySensorID
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getSensorsHumiditySensorID
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getSensorsHumiditySensorID(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getSensorsHumidityValueValid
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getSensorsHumidityValueValid
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getSensorsHumidityValueValid(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getSensorsHumiditySensorPowerStatus
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getSensorsHumiditySensorPowerStatus
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getSensorsHumiditySensorPowerStatus(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getSensorsHumidityInterval
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getSensorsHumidityInterval
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getSensorsHumidityInterval(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getSensorsHumidityValue
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getSensorsHumidityValue
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getSensorsHumidityValue(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}


/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getSensorsH2COSensorID
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getSensorsH2COSensorID
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getSensorsH2COSensorID(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getSensorsH2COValueValid
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getSensorsH2COValueValid
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getSensorsH2COValueValid(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getSensorsH2COSensorPowerStatus
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getSensorsH2COSensorPowerStatus
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getSensorsH2COSensorPowerStatus(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getSensorsH2COInterval
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getSensorsH2COInterval
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getSensorsH2COInterval(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getSensorsH2COValue
 * Signature: (Ljava/lang/String;)F
 */
JNIEXPORT jfloat JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getSensorsH2COValue
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    float ret = deviceWrapper.getSensorsH2COValue(c_deviceId);
    free(c_deviceId);
    return jfloat(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getSensorsPM25SensorID
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getSensorsPM25SensorID
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getSensorsPM25SensorID(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getSensorsPM25ValueValid
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getSensorsPM25ValueValid
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getSensorsPM25ValueValid(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getSensorsPM25SensorPowerStatus
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getSensorsPM25SensorPowerStatus
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getSensorsPM25SensorPowerStatus(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getSensorsPM25Interval
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getSensorsPM25Interval
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getSensorsPM25Interval(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getSensorsPM25Value
 * Signature: (Ljava/lang/String;)F
 */
JNIEXPORT jfloat JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getSensorsPM25Value
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    float ret = deviceWrapper.getSensorsPM25Value(c_deviceId);
    free(c_deviceId);
    return jfloat(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getSensorsCO2SensorID
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getSensorsCO2SensorID
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getSensorsCO2SensorID(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getSensorsCO2ValueValid
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getSensorsCO2ValueValid
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getSensorsCO2ValueValid(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getSensorsCO2SensorPowerStatus
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getSensorsCO2SensorPowerStatus
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getSensorsCO2SensorPowerStatus(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getSensorsCO2Interval
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getSensorsCO2Interval
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getSensorsCO2Interval(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getSensorsCO2Value
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getSensorsCO2Value
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getSensorsCO2Value(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getSensorsIsPeripheralsCommunicationError
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getSensorsIsPeripheralsCommunicationError
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getSensorsIsPeripheralsCommunicationError(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getSmartSwitchPowerStatus
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getSmartSwitchPowerStatus
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getSmartSwitchPowerStatus(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getSmartSwitchCurrent
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getSmartSwitchCurrent
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getSmartSwitchCurrent(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getSmartSwitchVoltage
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getSmartSwitchVoltage
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getSmartSwitchVoltage(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getSmartSwitchPowerConsum
 * Signature: (Ljava/lang/String;)J
 */
JNIEXPORT jlong JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getSmartSwitchPowerConsum
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    long ret = deviceWrapper.getSmartSwitchPowerConsum(c_deviceId);
    free(c_deviceId);
    return jlong(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getWifiModuleSmartControlStatus
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getWifiModuleSmartControlStatus
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getWifiModuleSmartControlStatus(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}




/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    queryWifiModuleModuleID
 * Signature: (Ljava/lang/String;)Z
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_queryWifiModuleModuleID
    (JNIEnv *env, jclass obj, jstring deviceId){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    CByte cbyte = deviceWrapper.queryWifiModuleModuleID(c_deviceId);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    return	javaArray;
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    queryWifiModuleVersion
 * Signature: (Ljava/lang/String;)Z
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_queryWifiModuleVersion
    (JNIEnv *env, jclass obj, jstring deviceId){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    CByte cbyte = deviceWrapper.queryWifiModuleVersion(c_deviceId);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    return	javaArray;
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    queryWifiModuleStatus
 * Signature: (Ljava/lang/String;)Z
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_queryWifiModuleStatus
    (JNIEnv *env, jclass obj, jstring deviceId){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    CByte cbyte = deviceWrapper.queryWifiModuleStatus(c_deviceId);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    return	javaArray;
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    clearWifiConfigPars
 * Signature: (Ljava/lang/String;)Z
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_clearWifiConfigPars
    (JNIEnv *env, jclass obj, jstring deviceId){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    CByte cbyte = deviceWrapper.clearWifiConfigPars(c_deviceId);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    return	javaArray;
}


/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    queryWifiModuleMac
 * Signature: (Ljava/lang/String;)Z
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_queryWifiModuleMac
    (JNIEnv *env, jclass obj, jstring deviceId){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    CByte cbyte = deviceWrapper.queryWifiModuleMac(c_deviceId);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    return	javaArray;
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    queryWifiModuleRSInfo
 * Signature: (Ljava/lang/String;)Z
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_queryWifiModuleRSInfo
    (JNIEnv *env, jclass obj, jstring deviceId){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    CByte cbyte = deviceWrapper.queryWifiModuleRSInfo(c_deviceId);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    return	javaArray;
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setWifiModuleRSInfo
 * Signature: (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setWifiModuleRSInfo
    (JNIEnv *env, jclass obj, jstring deviceId,jstring domainname,jstring port){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    char * c_domainname = jstringTostring(env,domainname);
    char * c_port = jstringTostring(env,port);
    CByte cbyte = deviceWrapper.setWifiModuleRSInfo(c_deviceId,c_domainname,c_port);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    free(c_domainname);
    free(c_port);
    return	javaArray;
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    queryWifiRouterInfo
 * Signature: (Ljava/lang/String;)Z
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_queryWifiRouterInfo
    (JNIEnv *env, jclass obj, jstring deviceId){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    CByte cbyte = deviceWrapper.queryWifiRouterInfo(c_deviceId);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    return	javaArray;
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setWifiRouterInfo
 * Signature: (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setWifiRouterInfo
    (JNIEnv *env, jclass obj, jstring deviceId,jstring ssid,jstring password){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    char * c_ssid = jstringTostring(env,ssid);
    char * c_password = jstringTostring(env,password);
    CByte cbyte = deviceWrapper.setWifiRouterInfo(c_deviceId,c_ssid,c_password);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    free(c_ssid);
    free(c_password);
    return	javaArray;
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setWifiToStationMode
 * Signature: (Ljava/lang/String;)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setWifiToStationMode
    (JNIEnv *env, jclass obj, jstring deviceId){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    CByte cbyte = deviceWrapper.setWifiToStationMode(c_deviceId);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    return	javaArray;
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    queryWifiModuleServerIp
 * Signature: (Ljava/lang/String;)Z
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_queryWifiModuleServerIp
    (JNIEnv *env, jclass obj, jstring deviceId){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    CByte cbyte = deviceWrapper.queryWifiModuleServerIp(c_deviceId);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    return	javaArray;
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setWifiToApMode
 * Signature: (Ljava/lang/String;)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setWifiToApMode
    (JNIEnv *env, jclass obj, jstring deviceId){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    CByte cbyte = deviceWrapper.setWifiToApMode(c_deviceId);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    return	javaArray;
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setWifiModuleLocalFlag
 * Signature: (Ljava/lang/String;Ljava/lang/String;)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setWifiModuleLocalFlag
    (JNIEnv *env, jclass obj, jstring deviceId,jstring flag){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    char * c_flag = jstringTostring(env,flag);
    CByte cbyte = deviceWrapper.setWifiModuleLocalFlag(c_deviceId,c_flag);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    free(c_flag);
    return	javaArray;
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setWifiProtocolVersion
 * Signature: (Ljava/lang/String;Ljava/lang/String;)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setWifiProtocolVersion
    (JNIEnv *env, jclass obj, jstring deviceId,jstring version){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    char * c_version = jstringTostring(env,version);
    CByte cbyte = deviceWrapper.setWifiProtocolVersion(c_deviceId,c_version);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    free(c_version);
    return	javaArray;
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setHttpUpdateWifiModule
 * Signature: (Ljava/lang/String;Ljava/lang/String;)Z
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setHttpUpdateWifiModule
    (JNIEnv *env, jclass obj, jstring deviceId,jstring url){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    char * c_url = jstringTostring(env,url);
    CByte cbyte = deviceWrapper.setHttpUpdateWifiModule(c_deviceId,c_url);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    free(c_url);
    return	javaArray;
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    querySmartSwitchValue
 * Signature: (Ljava/lang/String;)Z
 */
JNIEXPORT jstring JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_querySmartSwitchValue
    (JNIEnv *env, jclass obj, jstring deviceId){
    jstring strret=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    const char * c_ret = deviceWrapper.querySmartSwitchValue(c_deviceId).c_str();
    strret=env->NewStringUTF(c_ret);
    free(c_deviceId);
    return strret;
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    clearSmartSwitchValue
 * Signature: (Ljava/lang/String;)[B
 */
JNIEXPORT jstring JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_clearSmartSwitchValue
    (JNIEnv *env, jclass obj, jstring deviceId){
    jstring strret=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    const char * c_ret = deviceWrapper.clearSmartSwitchValue(c_deviceId).c_str();
    strret=env->NewStringUTF(c_ret);
    free(c_deviceId);
    return strret;
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setSmartSwitchPower
 * Signature: (Ljava/lang/String;Ljava/lang/String;)[B
 */
JNIEXPORT jstring JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setSmartSwitchPower
    (JNIEnv *env, jclass obj, jstring deviceId){
    jstring strret=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    const char * c_ret = deviceWrapper.clearSmartSwitchValue(c_deviceId).c_str();
    strret=env->NewStringUTF(c_ret);
    free(c_deviceId);
    return strret;
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setSmartcurtainMode
 * Signature: (Ljava/lang/String;I)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setSmartcurtainMode
    (JNIEnv *env, jclass obj, jstring deviceId, jint mode){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    CByte cbyte = deviceWrapper.setSmartcurtainMode(c_deviceId,(int)mode);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    return	javaArray;
        
        
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setSmartcurtainPosition
 * Signature: (Ljava/lang/String;I)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setSmartcurtainPosition
    (JNIEnv *env, jclass obj, jstring deviceId, jint position){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    CByte cbyte = deviceWrapper.setSmartcurtainPosition(c_deviceId,(int)position);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    return	javaArray;
        
        
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getSmartcurtainOnlineStatus
 * Signature: (Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getSmartcurtainOnlineStatus
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    bool ret = deviceWrapper.getSmartcurtainOnlineStatus(c_deviceId);
    free(deviceId);
    return (jboolean)ret;
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getSmartcurtainPowerStatusParameterIsValid
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getSmartcurtainPowerStatusParameterIsValid
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getSmartcurtainPowerStatusParameterIsValid(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getSmartcurtainPowerStatus
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getSmartcurtainPowerStatus
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getSmartcurtainPowerStatus(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getSmartcurtainPositionParameterIsValid
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getSmartcurtainPositionParameterIsValid
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getSmartcurtainPositionParameterIsValid(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getSmartcurtainPositionStatus
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getSmartcurtainPositionStatus
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getSmartcurtainPositionStatus(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getSmartcurtainIsPeripheralsCommunicationError
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getSmartcurtainIsPeripheralsCommunicationError
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getSmartcurtainIsPeripheralsCommunicationError(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setSmartlightPower
 * Signature: (Ljava/lang/String;I)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setSmartlightPower
    (JNIEnv *env, jclass obj, jstring deviceId, jint power){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    CByte cbyte = deviceWrapper.setSmartlightPower(c_deviceId,(int)power);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    return	javaArray;
        
        
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setSmartlightBrightness
 * Signature: (Ljava/lang/String;I)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setSmartlightBrightness
    (JNIEnv *env, jclass obj, jstring deviceId, jint brightnessValue){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    CByte cbyte = deviceWrapper.setSmartlightBrightness(c_deviceId,(int)brightnessValue);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    return	javaArray;
        
        
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setSmartlightRGB
 * Signature: (Ljava/lang/String;III)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setSmartlightRGB
    (JNIEnv *env, jclass obj, jstring deviceId, jint redValue,jint greenValue,jint  blueValue){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    CByte cbyte = deviceWrapper.setSmartlightRGB(c_deviceId,(int)redValue,(int)greenValue,(int)blueValue);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    return	javaArray;
        
        
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setSmartlightAirQualityLevel
 * Signature: (Ljava/lang/String;I)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setSmartlightAirQualityLevel
    (JNIEnv *env, jclass obj, jstring deviceId, jint airQualityLevel){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    CByte cbyte = deviceWrapper.setSmartlightAirQualityLevel(c_deviceId,(int)airQualityLevel);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    return	javaArray;
        
        
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setSmartlightColorTemperature
 * Signature: (Ljava/lang/String;I)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setSmartlightColorTemperature
    (JNIEnv *env, jclass obj, jstring deviceId, jint colorTemperatureValue){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    CByte cbyte = deviceWrapper.setSmartlightColorTemperature(c_deviceId,(int)colorTemperatureValue);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    return	javaArray;
        
        
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setSmartlightDeviceStatus
 * Signature: (Ljava/lang/String;I)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setSmartlightDeviceStatus
    (JNIEnv *env, jclass obj, jstring deviceId, jint deviceStatus){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    CByte cbyte = deviceWrapper.setSmartlightDeviceStatus(c_deviceId,(int)deviceStatus);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    return	javaArray;
        
        
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getSmartlightOnlineStatus
 * Signature: (Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getSmartlightOnlineStatus
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    bool ret = deviceWrapper.getSmartlightOnlineStatus(c_deviceId);
    free(deviceId);
    return (jboolean)ret;
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getSmartlightPower
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getSmartlightPower
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getSmartlightPower(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}


/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getSmartlightRGBSetValid
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getSmartlightRGBSetValid
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getSmartlightRGBSetValid(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getSmartlightRedValue
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getSmartlightRedValue
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getSmartlightRedValue(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getSmartlightGreenValue
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getSmartlightGreenValue
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getSmartlightGreenValue(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getSmartlightBlueValue
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getSmartlightBlueValue
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getSmartlightBlueValue(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getSmartlightColorTemperatureValid
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getSmartlightColorTemperatureValid
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getSmartlightColorTemperatureValid(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getSmartlightColorTemperatureValue
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getSmartlightColorTemperatureValue
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getSmartlightColorTemperatureValue(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getSmartlightBrightnessValid
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getSmartlightBrightnessValid
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getSmartlightBrightnessValid(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getSmartlightBrightnessValue
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getSmartlightBrightnessValue
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getSmartlightBrightnessValue(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getSmartlightDeviceStatusValid
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getSmartlightDeviceStatusValid
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getSmartlightDeviceStatusValid(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getSmartlightDeviceStatus
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getSmartlightDeviceStatus
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getSmartlightDeviceStatus(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getSmartlightAirStatusValid
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getSmartlightAirStatusValid
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getSmartlightAirStatusValid(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getSmartlightAirStatus
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getSmartlightAirStatus
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getSmartlightAirStatus(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getSmartlightIsPeripheralsCommunicationError
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getSmartlightIsPeripheralsCommunicationError
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getSmartlightIsPeripheralsCommunicationError(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setVoltameterPower
 * Signature: (Ljava/lang/String;I)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setVoltameterPower
    (JNIEnv *env, jclass obj, jstring deviceId, jint power){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    CByte cbyte = deviceWrapper.setVoltameterPower(c_deviceId,(int)power);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    return	javaArray;
        
        
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    setVoltameterResetCount
 * Signature: (Ljava/lang/String;I)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_setVoltameterResetCount
    (JNIEnv *env, jclass obj, jstring deviceId, jint isResetCount){
    jbyteArray javaArray=NULL;
    char * c_deviceId = jstringTostring(env,deviceId);
    CByte cbyte = deviceWrapper.setVoltameterResetCount(c_deviceId,(int)isResetCount);
    if(cbyte.getLength()>0){
        cbyteToJbyte(cbyte,javaArray);
    }
    free(c_deviceId);
    return	javaArray;
        
        
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getVoltameterPower
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getVoltameterPower
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getVoltameterPower(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}


/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getVoltameterCurrentValue
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getVoltameterCurrentValue
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getVoltameterCurrentValue(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getVoltameterVoltageValue
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getVoltameterVoltageValue
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getVoltameterVoltageValue(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getVoltameterQuantityValue
 * Signature: (Ljava/lang/String;)J
 */
JNIEXPORT jlong JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getVoltameterQuantityValue
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    long ret = deviceWrapper.getVoltameterQuantityValue(c_deviceId);
    free(c_deviceId);
    return jlong(ret);
}

/*
 * Class:     com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper
 * Method:    getVoltameterIsPeripheralsCommunicationError
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_xinlianfeng_livehome_devicesctrl_XlfDeviceWrapper_getVoltameterIsPeripheralsCommunicationError
    (JNIEnv *env, jclass obj, jstring deviceId){
    char * c_deviceId = jstringTostring(env,deviceId);
    int ret = deviceWrapper.getVoltameterIsPeripheralsCommunicationError(c_deviceId);
    free(c_deviceId);
    return jint(ret);
}
    
    
#ifdef __cplusplus
}
#endif


jint JNI_OnLoad(JavaVM* vm, void* reserved)
{       
	void *venv;
	#ifndef __cplusplus
	if ((*vm)->GetEnv(vm, (void**)&venv, JNI_VERSION_1_4) != JNI_OK)
	{
		return JNI_ERR;
	}
	#else
	if (vm->GetEnv((void**)&venv, JNI_VERSION_1_4) != JNI_OK)
	{
		return JNI_ERR;
	}
	#endif
	return JNI_VERSION_1_4;
}


