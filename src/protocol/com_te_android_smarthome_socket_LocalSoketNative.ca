/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include	<stdio.h>
#include	<stdlib.h>
#include    <string.h>
#include    <semaphore.h>
#include    <errno.h>

#include "com_te_android_smarthome_socket_LocalSoketNative.h"
#include    <pthread.h>
//#include    "xm_type.h"
#include    "protocol.h"
#include    "xmlog.h"

/* Header for class com_te_android_smarthome_socket_LocalSoketNative */

#ifndef _com_te_android_smarthome_socket_LocalSoketNative
#define _com_te_android_smarthome_socket_LocalSoketNative
#ifdef __cplusplus
extern "C" {
#endif

#ifndef XM_MAX_BUF
#define XM_MAX_BUF 1024
#endif
#ifndef XM_SUCCESS
#define XM_SUCCESS 0
#endif
//全局变量
JavaVM *g_jvm = NULL;
char* jstringTostring(JNIEnv* env, jstring jstr)
{
	char* rtn = NULL;
	jclass clsstring = (*env)->FindClass(env,"java/lang/String");
	jstring strencode = (*env)->NewStringUTF(env,"utf-8");
	jmethodID mid = (*env)->GetMethodID(env,clsstring, "getBytes", "(Ljava/lang/String;)[B");
	jbyteArray barr= (jbyteArray)(*env)->CallObjectMethod(env,jstr, mid, strencode);
	jsize alen = (*env)->GetArrayLength(env,barr);
	jbyte* ba = (*env)->GetByteArrayElements(env,barr, JNI_FALSE);
	
	if (alen > 0)
	{
		rtn = (char*)malloc(alen + 1);

		memcpy(rtn, ba, alen);
		rtn[alen] = 0;
	}
	(*env)->ReleaseByteArrayElements(env,barr, ba, 0);
	return rtn;
}

JNIEXPORT jint JNICALL Java_com_te_android_smarthome_socket_LocalSoketNative_initServer
  (JNIEnv * env, jclass obj, jstring port)
{
    int ret;
	char *strport=jstringTostring(env,port);
	LOGD("initServer:+++");
	ret=xm_init_servsr(strport,8);
	free(strport);
	LOGD("initServer:---");
    return ret;
}

JNIEXPORT jint JNICALL Java_com_te_android_smarthome_socket_LocalSoketNative_initClientIndex
  (JNIEnv * env, jclass obj, jstring ip, jstring port,jint devid,jint reset)
{
	int ret;
	char *strip=jstringTostring(env,ip);
	char *strport=jstringTostring(env,port);
	LOGD("initteClientIndex:+++");
	ret=xm_init_socket_index(strip,strport,devid,reset);
	free(strip);
	free(strport);
	LOGD("initteClientIndex:---");
    return ret;
}

JNIEXPORT jint JNICALL Java_com_te_android_smarthome_socket_LocalSoketNative_initClient
  (JNIEnv * env, jclass obj, jstring ip, jstring port)
{
	int ret;
	char *strip=jstringTostring(env,ip);
	char *strport=jstringTostring(env,port);
	LOGD("initClient:+++");
	ret=xm_init_socket_index(strip,strport,1,0);
	free(strip);
	free(strport);
	LOGD("initClient:---");
    return ret;
}

JNIEXPORT jint JNICALL Java_com_te_android_smarthome_socket_LocalSoketNative_initWithSocket
  (JNIEnv * env, jclass obj, jint soket)
{
  	int ret;
	LOGD("initClient_withsocket:+++");
	ret=xm_init_withsocket(soket);
	LOGD("initClient_withsocket:---");
    return ret;
}

JNIEXPORT jint JNICALL Java_com_te_android_smarthome_socket_LocalSoketNative_configAppliance
  (JNIEnv * env, jclass obj, jstring addressOne, jstring addressTwo, jstring addressThree, jstring addressFour, jstring addressFive,
		  jint addressType, jint addressCount, jint addressAll, jint addressStructType, jint crcType, jint encryptionType)
{	
    return 0;
}

JNIEXPORT jint JNICALL Java_com_te_android_smarthome_socket_LocalSoketNative_exit
  (JNIEnv * env, jclass obj)
{
	LOGD("exit");
    return xm_exit();
}

JNIEXPORT jint JNICALL Java_com_te_android_smarthome_socket_LocalSoketNative_exitSocket
  (JNIEnv * env, jclass obj, jint socket_fd){
  LOGD("exitSocket");
  return xm_exit_socket(socket_fd);
}

JNIEXPORT jstring JNICALL Java_com_te_android_smarthome_socket_LocalSoketNative_getVersion
  (JNIEnv * env, jclass obj)
{
	char *ret;
	jstring strRet;
	LOGD("getVersion:+++");
	ret=xm_get_version();
	if(!ret){
		strRet=(*env)->NewStringUTF(env,"1.0.0");
	}else{
		strRet=(*env)->NewStringUTF(env,ret);
		free(ret);
	}
	LOGD("getVersion:---");
	return strRet;
}

JNIEXPORT jstring JNICALL Java_com_te_android_smarthome_socket_LocalSoketNative_sendCommandIndex
  (JNIEnv * env, jclass obj, jint index,jstring applianceCmd)
{
	LOGD("sendCommand_new:in");
	char *data=jstringTostring(env,applianceCmd);
	char *pbuf;
	jstring strRet;
	int len,i;
	
	LOGD("sendCommand_new:%d",strlen(data));
	data[strlen(data)]='\0';
	pbuf=xm_send_index(index,data,strlen(data));

	len=strlen(pbuf);
	LOGD("sendCommand_new len:%d",len);
	for (i=0;i<len-1;i++)
		{
		if (pbuf[i]>=0x20 && pbuf[i]<=0x7e)
			continue;
		else if ((i+1)==(len-1))//last two character is "\r\n"
			{
			if (pbuf[i]==0xd && pbuf[i+1]==0xa)
			continue;
			}
		else
			{
			LOGD("sendCommand_new  %s return buff error !!! pbuf[%d]=0x%x",pbuf,i,pbuf[i]);
			pbuf=NULL;
			break;
			}
		}
	
	if(pbuf==NULL){
		LOGD("sendCommand_new:retv NULL");
		strRet=(*env)->NewStringUTF(env,"ERROR");		
	}else{
		LOGD("sendCommand_new:retv %s",pbuf);
		strRet=(*env)->NewStringUTF(env,pbuf);
		free(pbuf);
	}
	free(data);
	LOGD("sendCommand_new:---");
	return strRet;
}

JNIEXPORT jstring JNICALL Java_com_te_android_smarthome_socket_LocalSoketNative_sendCommand
  (JNIEnv * env, jclass obj, jstring applianceCmd)
{
	LOGD("sendCommand:in");
	char *pbuf;
	char *data=jstringTostring(env,applianceCmd);
	jstring strRet;
	LOGD("sendCommand:%d",strlen(data));
	data[strlen(data)]='\0';
	pbuf=xm_send(data);
	if(pbuf!=NULL){		
		LOGD("sendCommand:retv %s",pbuf);
		strRet=(*env)->NewStringUTF(env,pbuf);
		free(pbuf);
	}else{
		LOGD("sendCommand:retv NULL");
		strRet=(*env)->NewStringUTF(env,"ERROR");
	}
	free(data);
	LOGD("sendCommand:---");
	return strRet;
}



JNIEXPORT jstring JNICALL Java_com_te_android_smarthome_socket_LocalSoketNative_crcData
  (JNIEnv * env, jclass obj,jbyteArray buf,jint len,jstring strcrc){
  char *ret=NULL;
  jstring strret=NULL;
  char *data=(char *)(*env)->GetByteArrayElements(env, buf, 0);   
  char *crc=jstringTostring(env,strcrc);
  data[len]='\0';
  ret=crc_data(data,len,crc);
  if(ret!=NULL){
	  strret=(*env)->NewStringUTF(env,ret);	 
	  free(ret);
  }
  if (data!=NULL)
  (*env)->ReleaseByteArrayElements(env, buf,(jbyte *)data,0);  
  if (crc!=NULL)
  free(crc);
  return strret;
}

JNIEXPORT jstring JNICALL Java_com_te_android_smarthome_socket_LocalSoketNative_getPacket
  (JNIEnv * env, jclass obj,jint index){
  char *ret=NULL;
  jstring strret=NULL;
  ret=xm_get_packet(index);
  if(ret!=NULL){
	  strret=(*env)->NewStringUTF(env,ret);	 
	  free(ret);
  }else{
  	strret=(*env)->NewStringUTF(env,"");	 
  }
  return strret;
}

JNIEXPORT jstring JNICALL Java_com_te_android_smarthome_socket_LocalSoketNative_getParse
  (JNIEnv * env, jclass obj,jint index){
   char *ret=NULL;
  jstring strret=NULL;
  ret=xm_get_packet(index);
  if(ret!=NULL){
	  strret=(*env)->NewStringUTF(env,ret);	 
	  free(ret);
  }else{
  	strret=(*env)->NewStringUTF(env,"");	 
  }
  return strret;
}

JNIEXPORT jbyteArray JNICALL Java_com_te_android_smarthome_socket_LocalSoketNative_buildPacket
  (JNIEnv * env, jclass obj,jstring strat,jint index){
  char *ret=NULL;
  int len;
  jbyteArray retdata=NULL;
  char *data=jstringTostring(env,strat);
  len=strlen(data);
  ret=xm_build_packet(data,&len,index);
  if(len){  	
	retdata= (*env)->NewByteArray(env,len);	
	(*env)->SetByteArrayRegion(env,retdata, 0, len, (jbyte*)ret); 
	free(ret);
  }
  if (data!=NULL)
  free(data);
  return retdata;
}

JNIEXPORT jbyteArray JNICALL Java_com_te_android_smarthome_socket_LocalSoketNative_buildPacketFrame
  (JNIEnv * env, jclass obj,jstring strat,jint index,jint frame,jint sub_frame){
  char *ret=NULL;
  int len;
  jbyteArray retdata=NULL;
  char *data=jstringTostring(env,strat);
  len=strlen(data);
  ret=xm_build_packet_frame(data,&len,index,frame,sub_frame);
  LOGD("build_packet:retv %s len %d ",ret,len);
  if(ret!=NULL){  	
	retdata= (*env)->NewByteArray(env,len);	
	(*env)->SetByteArrayRegion(env,retdata, 0, len, (jbyte*)ret); 
	free(ret);
  }
  if (data!=NULL)
  free(data);
  return retdata;
}



JNIEXPORT jstring JNICALL Java_com_qd_android_livehome_socket_LocalSoketNative_buildParse
  (JNIEnv * env, jclass obj,jstring strat,jbyteArray buf,jint len){
   char *ret=NULL;
  jstring strret=NULL;
  int atlen;
  char *data=(char *)(*env)->GetByteArrayElements(env, buf, 0);   
  char *at=jstringTostring(env,strat);
  atlen=strlen(at);
  ret=xm_parse_data(at,atlen,data,len);
  if(ret!=NULL){
	  strret=(*env)->NewStringUTF(env,ret);	 
	  free(ret);
  }else{
  	strret=(*env)->NewStringUTF(env,"");	 
  }
  if (data!=NULL)
  (*env)->ReleaseByteArrayElements(env, buf,(jbyte *)data,0);  
  if (at!=NULL)
  free(at);
  return strret;
}

JNIEXPORT jbyteArray JNICALL Java_com_te_android_smarthome_socket_LocalSoketNative_buildPara
  (JNIEnv * env, jclass obj,jstring strat){
  char *ret=NULL;
  int len;
  jbyteArray retdata=NULL;
  char *data=jstringTostring(env,strat);
  len=strlen(data);
  ret=xm_build_para(data,&len);
  if(len){  	
	retdata= (*env)->NewByteArray(env,len);	
	(*env)->SetByteArrayRegion(env,retdata, 0, len, (jbyte*)ret); 
	free(ret);
  }
  if (data!=NULL)
  free(data);
  return retdata;
}

JNIEXPORT jstring JNICALL Java_com_te_android_smarthome_socket_LocalSoketNative_parsePara
  (JNIEnv * env, jclass obj,jstring strat,jbyteArray buf,jint len){
   char *ret=NULL;
  jstring strret=NULL;
  int atlen;
  char *data=(char *)(*env)->GetByteArrayElements(env, buf, 0);   
  char *at=jstringTostring(env,strat);
  atlen=strlen(at);
  ret=xm_parse_para(at,atlen,data,len);
  if(ret!=NULL){
	  strret=(*env)->NewStringUTF(env,ret);	 
	  free(ret);
  }else{
  	strret=(*env)->NewStringUTF(env,"");	 
  }
  if (data!=NULL)
  (*env)->ReleaseByteArrayElements(env, buf,(jbyte *)data,0);  
  if (at!=NULL)
  free(at);
  return strret;
}

#ifdef __cplusplus
}
#endif
#endif
jint JNI_OnLoad(JavaVM* vm, void* reserved)
{       
	void *venv;
	LOGD("OnLoad:+++");
	if ((*vm)->GetEnv(vm, (void**)&venv, JNI_VERSION_1_4) != JNI_OK)
	{
		return JNI_ERR;
	}
	//保存全局JVM以便在子线程中使用
    //(*venv)->GetJavaVM(venv,&g_jvm);
	g_jvm=vm;
	xm_init(g_jvm);
	LOGD("OnLoad:---");
	return JNI_VERSION_1_4;

}
