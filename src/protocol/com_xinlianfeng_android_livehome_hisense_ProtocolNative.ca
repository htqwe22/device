/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include	<stdio.h>
#include	<stdlib.h>
#include    <string.h>
#include    <semaphore.h>
#include    <errno.h>
#include "com_xinlianfeng_android_livehome_hisense_ProtocolNative.h"
#include    <pthread.h>
#include    "xm_type.h"
#include    "protocol.h"
#include    "xmlog.h"

/* Header for class com_xinlianfeng_android_livehome_hisense_ProtocolNative */

#ifndef _com_xinlianfeng_android_livehome_hisense_ProtocolNative
#define _com_xinlianfeng_android_livehome_hisense_ProtocolNative
#ifdef __cplusplus
extern "C" {
#endif

#ifndef XM_MAX_BUF
#define XM_MAX_BUF 1024
#endif
#ifndef XM_SUCCESS
#define XM_SUCCESS 0
#endif

char* jstringTostring(JNIEnv* env, jstring jstr)
{
	char* rtn = NULL;
	jclass clsstring = (*env)->FindClass(env,"java/lang/String");
	jstring strencode = (*env)->NewStringUTF(env,"utf-8");
	jmethodID mid = (*env)->GetMethodID(env,clsstring, "getBytes", "(Ljava/lang/String;)[B");
	jbyteArray barr= (jbyteArray)(*env)->CallObjectMethod(env,jstr, mid, strencode);
	jsize alen = (*env)->GetArrayLength(env,barr);
	jbyte* ba = (*env)->GetByteArrayElements(env,barr, JNI_FALSE);
	
	if (alen > 0)
	{
		rtn = (char*)malloc(alen + 1);

		memcpy(rtn, ba, alen);
		rtn[alen] = 0;
	}
	(*env)->ReleaseByteArrayElements(env,barr, ba, 0);
	return rtn;
}

JNIEXPORT jstring JNICALL Java_com_xinlianfeng_android_livehome_hisense_ProtocolNative_crcData
  (JNIEnv * env, jclass obj,jbyteArray buf,jint len,jstring strcrc){
  char *ret=NULL;
  jstring strret=NULL;
  char *data=(char *)(*env)->GetByteArrayElements(env, buf, 0);   
  char *crc=jstringTostring(env,strcrc);
  data[len]='\0';
  ret=crc_data(data,len,crc);
  if(ret!=NULL){
	  strret=(*env)->NewStringUTF(env,ret);	 
	  free(ret);
  }
  if (data!=NULL)
  (*env)->ReleaseByteArrayElements(env, buf,(jbyte *)data,0);  
  if (crc!=NULL)
  free(crc);
  return strret;
}



JNIEXPORT jstring JNICALL Java_com_xinlianfeng_android_livehome_hisense_ProtocolNative_buildParaFrame
  (JNIEnv * env, jclass obj,jstring strat,jint moblie_type,jint moblie_address,jint device_type,jint device_address,jint frame,jint sub_frame){
  char retbuf[1024];
  int len=0;
  jstring retdata=NULL;
  int type_checksum = FCS_2BYTES_ADD;
  if(strat == NULL)    // 判断传递过来的对象是否为NULL  
    {  
        LOGD("input string null!!\n");  
		retdata=(*env)->NewStringUTF(env,"");
        return retdata;    // 此外，也可以返回NULL，Java得到的将是null  
    }  
  char *data=jstringTostring(env,strat);
#if DEBUG_CMD
  LOGD("ProtocolNative_buildParaFrame:%s",data);
#endif
  memset(retbuf,0,1024);
  if(data!=NULL){
	  len=xlf_packet_build_frame(type_checksum,retbuf,data,strlen(data),moblie_type,moblie_address,device_type,device_address,frame,sub_frame);
	  if(len){ 
	  	retdata=(*env)->NewStringUTF(env,retbuf);
	  }else{
	  	retdata= (*env)->NewStringUTF(env,"");
	  }
	  free(data);
  }else{
  	retdata=(*env)->NewStringUTF(env,"");
  }
  return retdata;
}

JNIEXPORT jstring JNICALL Java_com_xinlianfeng_android_livehome_hisense_ProtocolNative_buildPara
  (JNIEnv * env, jclass obj,jstring strat,jint device_type,jint device_address,jint moblie_type,jint moblie_address){
  char retbuf[1024];
  int len=0;
  jstring retdata=NULL;
  char sequence =0;
  int type_checksum = FCS_2BYTES_ADD;
  if(strat == NULL)    // 判断传递过来的对象是否为NULL  
    {  
        LOGD("input string null!!\n");  
		retdata=(*env)->NewStringUTF(env,"");
        return retdata;    // 此外，也可以返回NULL，Java得到的将是null  
    }  
  char *data=jstringTostring(env,strat);
 
#if DEBUG_CMD
  LOGD("ProtocolNative_buildPara:%s",data);
#endif

  memset(retbuf,0,1024);
  if(data!=NULL){
	 if (memcmp(data,"AT+VW",5)==0)
 		{
  		len=xlf_vanword_build(retbuf,data,0x0,0x0,device_type);	
 		}
	else
		{
		len=xlf_packet_build(type_checksum,sequence,retbuf,data,strlen(data),device_type,device_address,moblie_type,moblie_address);
		}
	if(len){ 
#if DEBUG_CMD
	  	LOGD("ProtocolNative_buildPara data:%s",retbuf);
#endif
	  	retdata=(*env)->NewStringUTF(env,retbuf);
	  }else{
	  	retdata= (*env)->NewStringUTF(env,"");
	  }
	  free(data);
  }else{
  	retdata=(*env)->NewStringUTF(env,"");
  }
  return retdata;
}

JNIEXPORT jstring JNICALL Java_com_xinlianfeng_android_livehome_hisense_ProtocolNative_jsonBuildPara
  (JNIEnv * env, jclass obj,jstring strat,jint device_type,jint device_address,jint moblie_type,jint moblie_address){
  char retbuf[1024];
  int len=0;
  int type_checksum = FCS_2BYTES_ADD;
  
  jstring retdata=NULL;
  if(strat == NULL)    // 判断传递过来的对象是否为NULL  
    {  
        LOGD("input string null!!\n");  
		retdata=(*env)->NewStringUTF(env,"");
        return retdata;    // 此外，也可以返回NULL，Java得到的将是null  
    }  
  char *data=jstringTostring(env,strat);
#if DEBUG_CMD
  LOGD("ProtocolNative_JSbuildPara:%s",data);
#endif
  memset(retbuf,0,1024);
  if(data){
	len=js_build_cmd(retbuf,data,device_type,device_address,moblie_type,moblie_address);
	if(len){ 
#if DEBUG_CMD
	  	LOGD("ProtocolNative_buildPara data:%s",retbuf);
#endif
	  	retdata=(*env)->NewStringUTF(env,retbuf);
	  }else{
	  	retdata= (*env)->NewStringUTF(env,"");
	  }
	  free(data);
  }else{
  	retdata=(*env)->NewStringUTF(env,"");
  }
  return retdata;
}

JNIEXPORT jstring JNICALL Java_com_xinlianfeng_android_livehome_hisense_ProtocolNative_parsePara
  (JNIEnv * env, jclass obj,jstring strat,jint device_type){
  char retbuf[1024];
  int len=0;
  jstring strret=NULL;
  if(strat == NULL)    // 判断传递过来的对象是否为NULL  
    {  
        LOGD("input string null!!\n");  
		strret=(*env)->NewStringUTF(env,"");
        return strret;    // 此外，也可以返回NULL，Java得到的将是null  
    }  
  char *data=jstringTostring(env,strat);
#if DEBUG_CMD
	LOGD("ProtocolNative_parsePara:%s",data);
#endif
  memset(retbuf,0,1024);
  if(data!=NULL){
	if (memcmp(data,"00000003",8)==0)
	 len=xlf_vanword_pasre(retbuf,data,device_type);
	else
	  len=xlf_packet_pasre(retbuf,data,strlen(data),device_type);
	  if(len>0){
		  strret=(*env)->NewStringUTF(env,retbuf);	 
	  }else{
	  	strret=(*env)->NewStringUTF(env,"");	 
	  }
  	  free(data);
  }else{
  	strret=(*env)->NewStringUTF(env,"");
  }
  return strret;
}

JNIEXPORT jstring JNICALL Java_com_xinlianfeng_android_livehome_hisense_ProtocolNative_getDeviceAddress
  (JNIEnv * env, jclass obj,jstring strat){
  char retbuf[1024];
  int len=0;
  jstring strret=NULL;
  if(strat == NULL)    // 判断传递过来的对象是否为NULL  
    {  
        LOGD("input string null!!\n");  
		strret=(*env)->NewStringUTF(env,"");
        return strret;    // 此外，也可以返回NULL，Java得到的将是null  
    }  
  char *data=jstringTostring(env,strat);
#if DEBUG_CMD
  LOGD("ProtocolNative_parsePara:%s",data);
#endif
  memset(retbuf,0,1024);
  if(data!=NULL){
	  len=xlf_packet_pasre_deviceaddress(retbuf,data,strlen(data));
	  if(len>0){
		  strret=(*env)->NewStringUTF(env,retbuf);	 
	  }else{
	  	strret=(*env)->NewStringUTF(env,"");	 
	  }
  	  free(data);
  }else{
  	strret=(*env)->NewStringUTF(env,"");
  }
  return strret;
}


JNIEXPORT jstring JNICALL Java_com_xinlianfeng_android_livehome_hisense_ProtocolNative_getSourceDeviceType
  (JNIEnv * env, jclass obj,jstring strat){
  char retbuf[1024];
  int len=0;
  jstring strret=NULL;
  if(strat == NULL)    // 判断传递过来的对象是否为NULL  
    {  
        LOGD("input string null!!\n");  
		strret=(*env)->NewStringUTF(env,"");
        return strret;    // 此外，也可以返回NULL，Java得到的将是null  
    }  
  char *data=jstringTostring(env,strat);
#if DEBUG_CMD
  LOGD("ProtocolNative_parsePara:%s",data);
#endif
  memset(retbuf,0,1024);
  if(data!=NULL){
	  len=xlf_packet_pasre_sourcedevicetype(retbuf,data,strlen(data));
	  if(len>0){
		  strret=(*env)->NewStringUTF(env,retbuf);	 
	  }else{
	  	strret=(*env)->NewStringUTF(env,"");	 
	  }
  	  free(data);
  }else{
  	strret=(*env)->NewStringUTF(env,"");
  }
  return strret;
}


JNIEXPORT jstring JNICALL Java_com_xinlianfeng_android_livehome_hisense_ProtocolNative_getSourceDeviceAddress
  (JNIEnv * env, jclass obj,jstring strat){
  char retbuf[1024];
  int len=0;
  jstring strret=NULL;
  if(strat == NULL)    // 判断传递过来的对象是否为NULL  
    {  
        LOGD("input string null!!\n");  
		strret=(*env)->NewStringUTF(env,"");
        return strret;    // 此外，也可以返回NULL，Java得到的将是null  
    }  
  char *data=jstringTostring(env,strat);
#if DEBUG_CMD
  LOGD("ProtocolNative_getSourceDeviceType:%s",data);
#endif
  memset(retbuf,0,1024);
  if(data!=NULL){
	  len=xlf_packet_pasre_sourcedeviceaddress(retbuf,data,strlen(data));
	  if(len>0){
		  strret=(*env)->NewStringUTF(env,retbuf);	 
	  }else{
	  	strret=(*env)->NewStringUTF(env,"");	 
	  }
  	  free(data);
  }else{
  	strret=(*env)->NewStringUTF(env,"");
  }
  return strret;
}

JNIEXPORT jstring JNICALL Java_com_xinlianfeng_android_livehome_hisense_ProtocolNative_getDestinationDeviceType
  (JNIEnv * env, jclass obj,jstring strat){
  char retbuf[1024];
  int len=0;
  jstring strret=NULL;
  if(strat == NULL)    // 判断传递过来的对象是否为NULL  
    {  
        LOGD("input string null!!\n");  
		strret=(*env)->NewStringUTF(env,"");
        return strret;    // 此外，也可以返回NULL，Java得到的将是null  
    }  
  char *data=jstringTostring(env,strat);
#if DEBUG_CMD
  LOGD("ProtocolNative_getDestinationDeviceType:%s",data);
#endif
  memset(retbuf,0,1024);
  if(data!=NULL){
	  len=xlf_packet_pasre_destinationdevicetype(retbuf,data,strlen(data));
	  if(len>0){
		  strret=(*env)->NewStringUTF(env,retbuf);	 
	  }else{
	  	strret=(*env)->NewStringUTF(env,"");	 
	  }
  	  free(data);
  }else{
  	strret=(*env)->NewStringUTF(env,"");
  }
  return strret;
}


JNIEXPORT jstring JNICALL Java_com_xinlianfeng_android_livehome_hisense_ProtocolNative_getDestinationDeviceAddress
  (JNIEnv * env, jclass obj,jstring strat){
  char retbuf[1024];
  int len=0;
  jstring strret=NULL;
  if(strat == NULL)    // 判断传递过来的对象是否为NULL  
    {  
        LOGD("input string null!!\n");  
		strret=(*env)->NewStringUTF(env,"");
        return strret;    // 此外，也可以返回NULL，Java得到的将是null  
    }  
  char *data=jstringTostring(env,strat);
#if DEBUG_CMD
  LOGD("ProtocolNative_getDestinationDeviceAddress:%s",data);
#endif
  memset(retbuf,0,1024);
  if(data!=NULL){
	  len=xlf_packet_pasre_destinationdeviceaddress(retbuf,data,strlen(data));
	  if(len>0){
		  strret=(*env)->NewStringUTF(env,retbuf);	 
	  }else{
	  	strret=(*env)->NewStringUTF(env,"");	 
	  }
  	  free(data);
  }else{
  	strret=(*env)->NewStringUTF(env,"");
  }
  return strret;
}


#ifdef __cplusplus
}
#endif
#endif
jint JNI_OnLoad(JavaVM* vm, void* reserved)
{       
	void *venv;
	LOGD("OnLoad:+++");
	if ((*vm)->GetEnv(vm, (void**)&venv, JNI_VERSION_1_4) != JNI_OK)
	{
		return JNI_ERR;
	}
	LOGD("OnLoad:---");
	return JNI_VERSION_1_4;

}
